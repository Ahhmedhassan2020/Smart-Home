
Master Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000222  00800060  00001560  000015f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800282  00800282  00001816  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001816  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003414  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbb  00000000  00000000  00004eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b3d  00000000  00000000  00005c6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  000077a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000739  00000000  00000000  00007b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e97  00000000  00000000  000082c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c4 00 	jmp	0x188	; 0x188 <__ctors_end>
       4:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
       8:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
       c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      10:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      14:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      18:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      1c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      20:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      24:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      28:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__vector_10>
      2c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      30:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      34:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      38:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      3c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      40:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      44:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      48:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      4c:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      50:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <__bad_interrupt>
      54:	17 04       	cpc	r1, r7
      56:	5f 04       	cpc	r5, r15
      58:	ae 04       	cpc	r10, r14
      5a:	b4 04       	cpc	r11, r4
      5c:	ba 04       	cpc	r11, r10
      5e:	c0 04       	cpc	r12, r0
      60:	c9 04       	cpc	r12, r9
      62:	a3 04       	cpc	r10, r3
      64:	cf 04       	cpc	r12, r15
      66:	66 05       	cpc	r22, r6
      68:	a0 05       	cpc	r26, r0
      6a:	b9 05       	cpc	r27, r9
      6c:	d2 05       	cpc	r29, r2
      6e:	eb 05       	cpc	r30, r11
      70:	03 06       	cpc	r0, r19
      72:	03 06       	cpc	r0, r19
      74:	03 06       	cpc	r0, r19
      76:	03 06       	cpc	r0, r19
      78:	03 06       	cpc	r0, r19
      7a:	03 06       	cpc	r0, r19
      7c:	03 06       	cpc	r0, r19
      7e:	03 06       	cpc	r0, r19
      80:	03 06       	cpc	r0, r19
      82:	03 06       	cpc	r0, r19
      84:	03 06       	cpc	r0, r19
      86:	03 06       	cpc	r0, r19
      88:	03 06       	cpc	r0, r19
      8a:	03 06       	cpc	r0, r19
      8c:	03 06       	cpc	r0, r19
      8e:	03 06       	cpc	r0, r19
      90:	03 06       	cpc	r0, r19
      92:	03 06       	cpc	r0, r19
      94:	03 06       	cpc	r0, r19
      96:	03 06       	cpc	r0, r19
      98:	03 06       	cpc	r0, r19
      9a:	03 06       	cpc	r0, r19
      9c:	03 06       	cpc	r0, r19
      9e:	03 06       	cpc	r0, r19
      a0:	03 06       	cpc	r0, r19
      a2:	03 06       	cpc	r0, r19
      a4:	03 06       	cpc	r0, r19
      a6:	03 06       	cpc	r0, r19
      a8:	a0 05       	cpc	r26, r0
      aa:	b9 05       	cpc	r27, r9
      ac:	d2 05       	cpc	r29, r2
      ae:	eb 05       	cpc	r30, r11
      b0:	10 06       	cpc	r1, r16
      b2:	29 06       	cpc	r2, r25
      b4:	42 06       	cpc	r4, r18
      b6:	5b 06       	cpc	r5, r27
      b8:	73 06       	cpc	r7, r19
      ba:	73 06       	cpc	r7, r19
      bc:	73 06       	cpc	r7, r19
      be:	73 06       	cpc	r7, r19
      c0:	73 06       	cpc	r7, r19
      c2:	73 06       	cpc	r7, r19
      c4:	73 06       	cpc	r7, r19
      c6:	73 06       	cpc	r7, r19
      c8:	73 06       	cpc	r7, r19
      ca:	73 06       	cpc	r7, r19
      cc:	73 06       	cpc	r7, r19
      ce:	73 06       	cpc	r7, r19
      d0:	73 06       	cpc	r7, r19
      d2:	73 06       	cpc	r7, r19
      d4:	73 06       	cpc	r7, r19
      d6:	73 06       	cpc	r7, r19
      d8:	73 06       	cpc	r7, r19
      da:	73 06       	cpc	r7, r19
      dc:	73 06       	cpc	r7, r19
      de:	73 06       	cpc	r7, r19
      e0:	73 06       	cpc	r7, r19
      e2:	73 06       	cpc	r7, r19
      e4:	73 06       	cpc	r7, r19
      e6:	73 06       	cpc	r7, r19
      e8:	73 06       	cpc	r7, r19
      ea:	73 06       	cpc	r7, r19
      ec:	73 06       	cpc	r7, r19
      ee:	73 06       	cpc	r7, r19
      f0:	10 06       	cpc	r1, r16
      f2:	29 06       	cpc	r2, r25
      f4:	42 06       	cpc	r4, r18
      f6:	5b 06       	cpc	r5, r27
      f8:	83 06       	cpc	r8, r19
      fa:	98 06       	cpc	r9, r24
      fc:	ad 06       	cpc	r10, r29
      fe:	c2 06       	cpc	r12, r18
     100:	d6 06       	cpc	r13, r22
     102:	d6 06       	cpc	r13, r22
     104:	d6 06       	cpc	r13, r22
     106:	d6 06       	cpc	r13, r22
     108:	d6 06       	cpc	r13, r22
     10a:	d6 06       	cpc	r13, r22
     10c:	d6 06       	cpc	r13, r22
     10e:	d6 06       	cpc	r13, r22
     110:	d6 06       	cpc	r13, r22
     112:	d6 06       	cpc	r13, r22
     114:	d6 06       	cpc	r13, r22
     116:	d6 06       	cpc	r13, r22
     118:	d6 06       	cpc	r13, r22
     11a:	d6 06       	cpc	r13, r22
     11c:	d6 06       	cpc	r13, r22
     11e:	d6 06       	cpc	r13, r22
     120:	d6 06       	cpc	r13, r22
     122:	d6 06       	cpc	r13, r22
     124:	d6 06       	cpc	r13, r22
     126:	d6 06       	cpc	r13, r22
     128:	d6 06       	cpc	r13, r22
     12a:	d6 06       	cpc	r13, r22
     12c:	d6 06       	cpc	r13, r22
     12e:	d6 06       	cpc	r13, r22
     130:	d6 06       	cpc	r13, r22
     132:	d6 06       	cpc	r13, r22
     134:	d6 06       	cpc	r13, r22
     136:	d6 06       	cpc	r13, r22
     138:	83 06       	cpc	r8, r19
     13a:	98 06       	cpc	r9, r24
     13c:	ad 06       	cpc	r10, r29
     13e:	c2 06       	cpc	r12, r18
     140:	e6 06       	cpc	r14, r22
     142:	ff 06       	cpc	r15, r31
     144:	18 07       	cpc	r17, r24
     146:	31 07       	cpc	r19, r17
     148:	49 07       	cpc	r20, r25
     14a:	49 07       	cpc	r20, r25
     14c:	49 07       	cpc	r20, r25
     14e:	49 07       	cpc	r20, r25
     150:	49 07       	cpc	r20, r25
     152:	49 07       	cpc	r20, r25
     154:	49 07       	cpc	r20, r25
     156:	49 07       	cpc	r20, r25
     158:	49 07       	cpc	r20, r25
     15a:	49 07       	cpc	r20, r25
     15c:	49 07       	cpc	r20, r25
     15e:	49 07       	cpc	r20, r25
     160:	49 07       	cpc	r20, r25
     162:	49 07       	cpc	r20, r25
     164:	49 07       	cpc	r20, r25
     166:	49 07       	cpc	r20, r25
     168:	49 07       	cpc	r20, r25
     16a:	49 07       	cpc	r20, r25
     16c:	49 07       	cpc	r20, r25
     16e:	49 07       	cpc	r20, r25
     170:	49 07       	cpc	r20, r25
     172:	49 07       	cpc	r20, r25
     174:	49 07       	cpc	r20, r25
     176:	49 07       	cpc	r20, r25
     178:	49 07       	cpc	r20, r25
     17a:	49 07       	cpc	r20, r25
     17c:	49 07       	cpc	r20, r25
     17e:	49 07       	cpc	r20, r25
     180:	e6 06       	cpc	r14, r22
     182:	ff 06       	cpc	r15, r31
     184:	18 07       	cpc	r17, r24
     186:	31 07       	cpc	r19, r17

00000188 <__ctors_end>:
     188:	11 24       	eor	r1, r1
     18a:	1f be       	out	0x3f, r1	; 63
     18c:	cf e5       	ldi	r28, 0x5F	; 95
     18e:	d8 e0       	ldi	r29, 0x08	; 8
     190:	de bf       	out	0x3e, r29	; 62
     192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
     194:	12 e0       	ldi	r17, 0x02	; 2
     196:	a0 e6       	ldi	r26, 0x60	; 96
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e0 e6       	ldi	r30, 0x60	; 96
     19c:	f5 e1       	ldi	r31, 0x15	; 21
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <__do_copy_data+0x10>
     1a0:	05 90       	lpm	r0, Z+
     1a2:	0d 92       	st	X+, r0
     1a4:	a2 38       	cpi	r26, 0x82	; 130
     1a6:	b1 07       	cpc	r27, r17
     1a8:	d9 f7       	brne	.-10     	; 0x1a0 <__do_copy_data+0xc>

000001aa <__do_clear_bss>:
     1aa:	22 e0       	ldi	r18, 0x02	; 2
     1ac:	a2 e8       	ldi	r26, 0x82	; 130
     1ae:	b2 e0       	ldi	r27, 0x02	; 2
     1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <.do_clear_bss_start>

000001b2 <.do_clear_bss_loop>:
     1b2:	1d 92       	st	X+, r1

000001b4 <.do_clear_bss_start>:
     1b4:	a5 38       	cpi	r26, 0x85	; 133
     1b6:	b2 07       	cpc	r27, r18
     1b8:	e1 f7       	brne	.-8      	; 0x1b2 <.do_clear_bss_loop>
     1ba:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
     1be:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <_exit>

000001c2 <__bad_interrupt>:
     1c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c6 <main>:
#include "EEPROM.h"
volatile uint16 session_counter = 0;//used to calculate session time
uint8 timeout_flag = FALSE;//used to know if the session is still valid or timed out 

int main(void)
{
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <main+0x6>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <main+0x8>
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	uint8 key_pressed = NOT_PRESSED;	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
	/**********************  Initialization  ********************************************/
    LCD_intial();//initializes the LCD screen
     1d2:	0e 94 02 09 	call	0x1204	; 0x1204 <LCD_intial>
	keypad_vInit();//initializes the keypad
     1d6:	0e 94 5d 07 	call	0xeba	; 0xeba <keypad_vInit>
	SPI_vInitMaster();//initializes the spi protocol
     1da:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <SPI_vInitMaster>
	LED_vInit(ADMIN_LED_PORT,ADMIN_LED_PIN) ;//initializes the admin led 
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	83 e4       	ldi	r24, 0x43	; 67
     1e2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LED_vInit>
	LED_vInit(GUEST_LED_PORT,GUEST_LED_PIN) ;//initializes the admin led 
     1e6:	61 e0       	ldi	r22, 0x01	; 1
     1e8:	83 e4       	ldi	r24, 0x43	; 67
     1ea:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LED_vInit>
	LED_vInit(BLOCK_LED_PORT,BLOCK_LED_PIN) ;//initializes the admin led 
     1ee:	62 e0       	ldi	r22, 0x02	; 2
     1f0:	83 e4       	ldi	r24, 0x43	; 67
     1f2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <LED_vInit>
	/**********************  Printing welcome message ********************************************/
	LCD_send_string("welcome to smart");
     1f6:	80 e7       	ldi	r24, 0x70	; 112
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
	LCD_move_cursor(2,1); 
     1fe:	61 e0       	ldi	r22, 0x01	; 1
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
	LCD_send_string("home system!");
     206:	81 e8       	ldi	r24, 0x81	; 129
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     20e:	2f ef       	ldi	r18, 0xFF	; 255
     210:	39 e6       	ldi	r19, 0x69	; 105
     212:	88 e1       	ldi	r24, 0x18	; 24
     214:	21 50       	subi	r18, 0x01	; 1
     216:	30 40       	sbci	r19, 0x00	; 0
     218:	80 40       	sbci	r24, 0x00	; 0
     21a:	e1 f7       	brne	.-8      	; 0x214 <main+0x4e>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0x58>
     21e:	00 00       	nop
	_delay_ms(1000);
	LCD_clear_screen();
     220:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
	/**********************  Setting Admin and Geust password if not set ********************************************/
	if ((EEPROM_read(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET)||(EEPROM_read(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET))
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     22c:	81 11       	cpse	r24, r1
     22e:	07 c0       	rjmp	.+14     	; 0x23e <main+0x78>
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <main+0x78>
     23c:	ba c0       	rjmp	.+372    	; 0x3b2 <main+0x1ec>
	{
		LCD_send_string("Login for");
     23e:	8e e8       	ldi	r24, 0x8E	; 142
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
		LCD_move_cursor(2,1);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
		LCD_send_string("first time");
     24e:	88 e9       	ldi	r24, 0x98	; 152
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     256:	9f ef       	ldi	r25, 0xFF	; 255
     258:	29 e6       	ldi	r18, 0x69	; 105
     25a:	38 e1       	ldi	r19, 0x18	; 24
     25c:	91 50       	subi	r25, 0x01	; 1
     25e:	20 40       	sbci	r18, 0x00	; 0
     260:	30 40       	sbci	r19, 0x00	; 0
     262:	e1 f7       	brne	.-8      	; 0x25c <main+0x96>
     264:	00 c0       	rjmp	.+0      	; 0x266 <main+0xa0>
     266:	00 00       	nop
		_delay_ms(1000);
		LCD_clear_screen();
     268:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
		LCD_send_string("set admin pass");
     26c:	83 ea       	ldi	r24, 0xA3	; 163
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
		LCD_move_cursor(2,1);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
		LCD_send_string("admin pass:");
     27c:	82 eb       	ldi	r24, 0xB2	; 178
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
	///////////////////////Setting Admin Password /////////////////////////////////////////////////////////////
	uint8 pass_counter = 0;
	for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     284:	10 e0       	ldi	r17, 0x00	; 0
     286:	20 c0       	rjmp	.+64     	; 0x2c8 <main+0x102>
	{
		do
		{
			key_pressed = keypad_u8check_press();
     288:	0e 94 9a 07 	call	0xf34	; 0xf34 <keypad_u8check_press>
     28c:	08 2f       	mov	r16, r24
		} while (key_pressed==NOT_PRESSED);
     28e:	8f 3f       	cpi	r24, 0xFF	; 255
     290:	d9 f3       	breq	.-10     	; 0x288 <main+0xc2>
		LCD_send_char(key_pressed);
     292:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	92 e5       	ldi	r25, 0x52	; 82
     29a:	27 e0       	ldi	r18, 0x07	; 7
     29c:	81 50       	subi	r24, 0x01	; 1
     29e:	90 40       	sbci	r25, 0x00	; 0
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0xd6>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0xe0>
     2a6:	00 00       	nop
		_delay_ms(CHARACTER_PREVIEW_TIME);
		LCD_move_cursor(2,12+pass_counter);
     2a8:	6c e0       	ldi	r22, 0x0C	; 12
     2aa:	61 0f       	add	r22, r17
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
		LCD_send_char(PASS_SYMPOL);
     2b2:	8a e2       	ldi	r24, 0x2A	; 42
     2b4:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
		EEPROM_write(EEPROM_ADMIN_ADDRESS+pass_counter,key_pressed);
     2b8:	81 2f       	mov	r24, r17
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	60 2f       	mov	r22, r16
     2be:	8e 5f       	subi	r24, 0xFE	; 254
     2c0:	9e 4f       	sbci	r25, 0xFE	; 254
     2c2:	0e 94 4a 07 	call	0xe94	; 0xe94 <EEPROM_write>
		LCD_send_string("set admin pass");
		LCD_move_cursor(2,1);
		LCD_send_string("admin pass:");
	///////////////////////Setting Admin Password /////////////////////////////////////////////////////////////
	uint8 pass_counter = 0;
	for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     2c6:	1f 5f       	subi	r17, 0xFF	; 255
     2c8:	14 30       	cpi	r17, 0x04	; 4
     2ca:	f0 f2       	brcs	.-68     	; 0x288 <main+0xc2>
		_delay_ms(CHARACTER_PREVIEW_TIME);
		LCD_move_cursor(2,12+pass_counter);
		LCD_send_char(PASS_SYMPOL);
		EEPROM_write(EEPROM_ADMIN_ADDRESS+pass_counter,key_pressed);
	}
	EEPROM_write(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);
     2cc:	60 e0       	ldi	r22, 0x00	; 0
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	0e 94 4a 07 	call	0xe94	; 0xe94 <EEPROM_write>
	LCD_clear_screen();
     2d6:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
	LCD_send_string("password set");
     2da:	8e eb       	ldi	r24, 0xBE	; 190
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
	LCD_move_cursor(2,1);
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
	LCD_send_string("successfully");
     2ea:	8b ec       	ldi	r24, 0xCB	; 203
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     2f2:	3f ef       	ldi	r19, 0xFF	; 255
     2f4:	84 e3       	ldi	r24, 0x34	; 52
     2f6:	9c e0       	ldi	r25, 0x0C	; 12
     2f8:	31 50       	subi	r19, 0x01	; 1
     2fa:	80 40       	sbci	r24, 0x00	; 0
     2fc:	90 40       	sbci	r25, 0x00	; 0
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x132>
     300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x13c>
     302:	00 00       	nop
	_delay_ms(500);
	LCD_clear_screen();
     304:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
	////////////////////////Setting Guest Password/////////////////////////////////////////////////////////
	LCD_clear_screen();
     308:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
	LCD_send_string("set Guest pass");
     30c:	88 ed       	ldi	r24, 0xD8	; 216
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
	LCD_move_cursor(2,1);
     314:	61 e0       	ldi	r22, 0x01	; 1
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
	LCD_send_string("Guest pass:");
     31c:	87 ee       	ldi	r24, 0xE7	; 231
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
	for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     324:	10 e0       	ldi	r17, 0x00	; 0
     326:	20 c0       	rjmp	.+64     	; 0x368 <main+0x1a2>
	{
		do
		{
			key_pressed = keypad_u8check_press();
     328:	0e 94 9a 07 	call	0xf34	; 0xf34 <keypad_u8check_press>
     32c:	08 2f       	mov	r16, r24
		} while (key_pressed==NOT_PRESSED);
     32e:	8f 3f       	cpi	r24, 0xFF	; 255
     330:	d9 f3       	breq	.-10     	; 0x328 <main+0x162>
		LCD_send_char(key_pressed);
     332:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
     336:	2f ef       	ldi	r18, 0xFF	; 255
     338:	32 e5       	ldi	r19, 0x52	; 82
     33a:	87 e0       	ldi	r24, 0x07	; 7
     33c:	21 50       	subi	r18, 0x01	; 1
     33e:	30 40       	sbci	r19, 0x00	; 0
     340:	80 40       	sbci	r24, 0x00	; 0
     342:	e1 f7       	brne	.-8      	; 0x33c <main+0x176>
     344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x180>
     346:	00 00       	nop
		_delay_ms(CHARACTER_PREVIEW_TIME);
		LCD_move_cursor(2,12+pass_counter);
     348:	6c e0       	ldi	r22, 0x0C	; 12
     34a:	61 0f       	add	r22, r17
     34c:	82 e0       	ldi	r24, 0x02	; 2
     34e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
		LCD_send_char(PASS_SYMPOL);
     352:	8a e2       	ldi	r24, 0x2A	; 42
     354:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
		EEPROM_write(EEPROM_GUEST_ADDRESS+pass_counter,key_pressed);
     358:	81 2f       	mov	r24, r17
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	60 2f       	mov	r22, r16
     35e:	8a 5f       	subi	r24, 0xFA	; 250
     360:	9e 4f       	sbci	r25, 0xFE	; 254
     362:	0e 94 4a 07 	call	0xe94	; 0xe94 <EEPROM_write>
	////////////////////////Setting Guest Password/////////////////////////////////////////////////////////
	LCD_clear_screen();
	LCD_send_string("set Guest pass");
	LCD_move_cursor(2,1);
	LCD_send_string("Guest pass:");
	for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     366:	1f 5f       	subi	r17, 0xFF	; 255
     368:	14 30       	cpi	r17, 0x04	; 4
     36a:	f0 f2       	brcs	.-68     	; 0x328 <main+0x162>
		_delay_ms(CHARACTER_PREVIEW_TIME);
		LCD_move_cursor(2,12+pass_counter);
		LCD_send_char(PASS_SYMPOL);
		EEPROM_write(EEPROM_GUEST_ADDRESS+pass_counter,key_pressed);
	}
	EEPROM_write(GUEST_PASS_STATUS_ADDRESS,PASS_SET);
     36c:	60 e0       	ldi	r22, 0x00	; 0
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 4a 07 	call	0xe94	; 0xe94 <EEPROM_write>
	LCD_clear_screen();
     376:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
	LCD_send_string("password set");
     37a:	8e eb       	ldi	r24, 0xBE	; 190
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
	LCD_move_cursor(2,1);
     382:	61 e0       	ldi	r22, 0x01	; 1
     384:	82 e0       	ldi	r24, 0x02	; 2
     386:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
	LCD_send_string("successfully");
     38a:	8b ec       	ldi	r24, 0xCB	; 203
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     392:	9f ef       	ldi	r25, 0xFF	; 255
     394:	24 e3       	ldi	r18, 0x34	; 52
     396:	3c e0       	ldi	r19, 0x0C	; 12
     398:	91 50       	subi	r25, 0x01	; 1
     39a:	20 40       	sbci	r18, 0x00	; 0
     39c:	30 40       	sbci	r19, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <main+0x1d2>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x1dc>
     3a2:	00 00       	nop
	_delay_ms(500);
	LCD_clear_screen();
     3a4:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
	EEPROM_write(LOGIN_BLOCKED_ADDRESS,FALSE);
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	8a e0       	ldi	r24, 0x0A	; 10
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 4a 07 	call	0xe94	; 0xe94 <EEPROM_write>
	////////////////////////Setting Guest Password/////////////////////////////////////////////////////////
	LCD_clear_screen();
	LCD_send_string("set Guest pass");
	LCD_move_cursor(2,1);
	LCD_send_string("Guest pass:");
	for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     3b2:	c1 2c       	mov	r12, r1
     3b4:	f1 2c       	mov	r15, r1
	while (1)
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
		uint8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
			/*******************handling Time out ********************************************************/
		if ( timeout_flag==TRUE )//check for timeout
     3b6:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     3ba:	81 30       	cpi	r24, 0x01	; 1
     3bc:	01 f5       	brne	.+64     	; 0x3fe <main+0x238>
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
     3be:	0e 94 9e 0a 	call	0x153c	; 0x153c <timer0_stop>
			session_counter = 0;//clear session counter
     3c2:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <session_counter+0x1>
     3c6:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <session_counter>
			timeout_flag=FALSE;//clear time out flag
     3ca:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <__data_end>
			login_mode=NO_MODE;//log the user out
			key_pressed = NOT_PRESSED;//clear the key_pressed to avoid unwanted selection in the menu switch
			LED_vTurnOff(GUEST_LED_PORT,GUEST_LED_PIN);//turnoff the led of the guest
     3ce:	61 e0       	ldi	r22, 0x01	; 1
     3d0:	83 e4       	ldi	r24, 0x43	; 67
     3d2:	0e 94 84 09 	call	0x1308	; 0x1308 <LED_vTurnOff>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	83 e4       	ldi	r24, 0x43	; 67
     3da:	0e 94 84 09 	call	0x1308	; 0x1308 <LED_vTurnOff>
			LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     3de:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
			LCD_send_string("Session Timeout");//print session timeout message
     3e2:	83 ef       	ldi	r24, 0xF3	; 243
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	99 e6       	ldi	r25, 0x69	; 105
     3ee:	28 e1       	ldi	r18, 0x18	; 24
     3f0:	81 50       	subi	r24, 0x01	; 1
     3f2:	90 40       	sbci	r25, 0x00	; 0
     3f4:	20 40       	sbci	r18, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0x22a>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0x234>
     3fa:	00 00       	nop
		if ( timeout_flag==TRUE )//check for timeout
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
			session_counter = 0;//clear session counter
			timeout_flag=FALSE;//clear time out flag
			login_mode=NO_MODE;//log the user out
     3fc:	f1 2c       	mov	r15, r1
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_write(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     3fe:	e1 2c       	mov	r14, r1
     400:	b3 c1       	rjmp	.+870    	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
		{
			/*******************handling block mode********************************************************/
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
     402:	31 e0       	ldi	r19, 0x01	; 1
     404:	c3 12       	cpse	r12, r19
     406:	27 c0       	rjmp	.+78     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			{
				LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     408:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
				LCD_send_string("Login blocked");
     40c:	83 e0       	ldi	r24, 0x03	; 3
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
				LCD_move_cursor(2,1);
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	82 e0       	ldi	r24, 0x02	; 2
     418:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
				LCD_send_string("wait 20 seconds");
     41c:	81 e1       	ldi	r24, 0x11	; 17
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
     424:	62 e0       	ldi	r22, 0x02	; 2
     426:	83 e4       	ldi	r24, 0x43	; 67
     428:	0e 94 80 09 	call	0x1300	; 0x1300 <LED_vTurnOn>
     42c:	8a ea       	ldi	r24, 0xAA	; 170
     42e:	96 ee       	ldi	r25, 0xE6	; 230
     430:	26 e9       	ldi	r18, 0x96	; 150
     432:	31 e0       	ldi	r19, 0x01	; 1
     434:	81 50       	subi	r24, 0x01	; 1
     436:	90 40       	sbci	r25, 0x00	; 0
     438:	20 40       	sbci	r18, 0x00	; 0
     43a:	30 40       	sbci	r19, 0x00	; 0
     43c:	d9 f7       	brne	.-10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     43e:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
				block_mode_flag = FALSE;//Disable block of runtime
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
     440:	62 e0       	ldi	r22, 0x02	; 2
     442:	83 e4       	ldi	r24, 0x43	; 67
     444:	0e 94 84 09 	call	0x1308	; 0x1308 <LED_vTurnOff>
				EEPROM_write(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	8a e0       	ldi	r24, 0x0A	; 10
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	0e 94 4a 07 	call	0xe94	; 0xe94 <EEPROM_write>
				LCD_send_string("Login blocked");
				LCD_move_cursor(2,1);
				LCD_send_string("wait 20 seconds");
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
     452:	e1 2c       	mov	r14, r1
				block_mode_flag = FALSE;//Disable block of runtime
     454:	c1 2c       	mov	r12, r1
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
				EEPROM_write(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}
			/**************************************************************************************************/
			LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     456:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
			LCD_send_string("Select mode:");
     45a:	81 e2       	ldi	r24, 0x21	; 33
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
			LCD_move_cursor(2,1);
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
			LCD_send_string("0:Admin 1:Guest");
     46a:	8e e2       	ldi	r24, 0x2E	; 46
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
			/********************Handling wrong choice of keys***************************************************/
			do
			{
				key_pressed = keypad_u8check_press();
     472:	0e 94 9a 07 	call	0xf34	; 0xf34 <keypad_u8check_press>
			} while (key_pressed==NOT_PRESSED);
     476:	8f 3f       	cpi	r24, 0xFF	; 255
     478:	e1 f3       	breq	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
			if ((key_pressed!=CHECK_ADMIN_MODE)&&(key_pressed!=CHECK_GUEST_MODE))
     47a:	90 ed       	ldi	r25, 0xD0	; 208
     47c:	98 0f       	add	r25, r24
     47e:	92 30       	cpi	r25, 0x02	; 2
     480:	80 f0       	brcs	.+32     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			{
				LCD_clear_screen();
     482:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
				LCD_send_string("wrong input");
     486:	8e e3       	ldi	r24, 0x3E	; 62
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     48e:	8f ef       	ldi	r24, 0xFF	; 255
     490:	99 e6       	ldi	r25, 0x69	; 105
     492:	28 e1       	ldi	r18, 0x18	; 24
     494:	81 50       	subi	r24, 0x01	; 1
     496:	90 40       	sbci	r25, 0x00	; 0
     498:	20 40       	sbci	r18, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
     49e:	00 00       	nop
     4a0:	63 c1       	rjmp	.+710    	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
				_delay_ms(1000);
				continue;
			}
			/*************************************************************************************************/
			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	99 83       	std	Y+1, r25	; 0x01
     4a6:	9a 83       	std	Y+2, r25	; 0x02
     4a8:	9b 83       	std	Y+3, r25	; 0x03
     4aa:	9c 83       	std	Y+4, r25	; 0x04
			switch (key_pressed)
     4ac:	80 33       	cpi	r24, 0x30	; 48
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4b0:	aa c0       	rjmp	.+340    	; 0x606 <__EEPROM_REGION_LENGTH__+0x206>
     4b2:	81 33       	cpi	r24, 0x31	; 49
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     4b6:	53 c1       	rjmp	.+678    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
     4b8:	57 c1       	rjmp	.+686    	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE :
				while (login_mode!=ADMIN)
				{
					LCD_clear_screen();
     4ba:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
					LCD_send_string("Admin mode");
     4be:	8a e4       	ldi	r24, 0x4A	; 74
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
					LCD_move_cursor(2,1);
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	82 e0       	ldi	r24, 0x02	; 2
     4ca:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
					LCD_send_string("Enter pass:");
     4ce:	85 e5       	ldi	r24, 0x55	; 85
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     4d6:	3f ef       	ldi	r19, 0xFF	; 255
     4d8:	81 ee       	ldi	r24, 0xE1	; 225
     4da:	94 e0       	ldi	r25, 0x04	; 4
     4dc:	31 50       	subi	r19, 0x01	; 1
     4de:	80 40       	sbci	r24, 0x00	; 0
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e6:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     4e8:	d1 2c       	mov	r13, r1
     4ea:	21 c0       	rjmp	.+66     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
					{
						do
						{
							pass[pass_counter] = keypad_u8check_press();
     4ec:	0d 2d       	mov	r16, r13
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	0e 94 9a 07 	call	0xf34	; 0xf34 <keypad_u8check_press>
     4f4:	e1 e0       	ldi	r30, 0x01	; 1
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	ec 0f       	add	r30, r28
     4fa:	fd 1f       	adc	r31, r29
     4fc:	e0 0f       	add	r30, r16
     4fe:	f1 1f       	adc	r31, r17
     500:	80 83       	st	Z, r24
						} while (pass[pass_counter]==NOT_STORED);
     502:	8f 3f       	cpi	r24, 0xFF	; 255
     504:	99 f3       	breq	.-26     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
						LCD_send_char(pass[pass_counter]);
     506:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
     50a:	2f ef       	ldi	r18, 0xFF	; 255
     50c:	32 e5       	ldi	r19, 0x52	; 82
     50e:	87 e0       	ldi	r24, 0x07	; 7
     510:	21 50       	subi	r18, 0x01	; 1
     512:	30 40       	sbci	r19, 0x00	; 0
     514:	80 40       	sbci	r24, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     518:	00 c0       	rjmp	.+0      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     51a:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);
						LCD_move_cursor(2,12+pass_counter);
     51c:	6c e0       	ldi	r22, 0x0C	; 12
     51e:	6d 0d       	add	r22, r13
     520:	82 e0       	ldi	r24, 0x02	; 2
     522:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
						LCD_send_char(PASS_SYMPOL);
     526:	8a e2       	ldi	r24, 0x2A	; 42
     528:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
					LCD_clear_screen();
					LCD_send_string("Admin mode");
					LCD_move_cursor(2,1);
					LCD_send_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     52c:	d3 94       	inc	r13
     52e:	93 e0       	ldi	r25, 0x03	; 3
     530:	9d 15       	cp	r25, r13
     532:	e0 f6       	brcc	.-72     	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
						_delay_ms(CHARACTER_PREVIEW_TIME);
						LCD_move_cursor(2,12+pass_counter);
						LCD_send_char(PASS_SYMPOL);
					}//end of for loop 
					/***********compare passwords**************/
					if (EEPROM_read(EEPROM_ADMIN_ADDRESS)==pass[0]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+1)==pass[1]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+2)==pass[2]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+3)==pass[3])
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     53c:	99 81       	ldd	r25, Y+1	; 0x01
     53e:	89 13       	cpse	r24, r25
     540:	37 c0       	rjmp	.+110    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
     54c:	89 13       	cpse	r24, r25
     54e:	30 c0       	rjmp	.+96     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     550:	84 e0       	ldi	r24, 0x04	; 4
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     558:	9b 81       	ldd	r25, Y+3	; 0x03
     55a:	89 13       	cpse	r24, r25
     55c:	29 c0       	rjmp	.+82     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
     55e:	85 e0       	ldi	r24, 0x05	; 5
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     566:	9c 81       	ldd	r25, Y+4	; 0x04
     568:	89 13       	cpse	r24, r25
     56a:	22 c0       	rjmp	.+68     	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
					{
						login_mode = ADMIN;
						pass_tries_count = 0;
						LCD_clear_screen();
     56c:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
						LCD_send_string("Right password");
     570:	81 e6       	ldi	r24, 0x61	; 97
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
						LCD_move_cursor(2,1);
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
						LCD_send_string("Admin mode");
     580:	8a e4       	ldi	r24, 0x4A	; 74
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	34 e3       	ldi	r19, 0x34	; 52
     58c:	8c e0       	ldi	r24, 0x0C	; 12
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	30 40       	sbci	r19, 0x00	; 0
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
     596:	00 c0       	rjmp	.+0      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
     598:	00 00       	nop
						_delay_ms(500);
						LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	83 e4       	ldi	r24, 0x43	; 67
     59e:	0e 94 80 09 	call	0x1300	; 0x1300 <LED_vTurnOn>
						timer_CTC_init_interrupt();///////////////////////////////////
     5a2:	0e 94 8e 0a 	call	0x151c	; 0x151c <timer_CTC_init_interrupt>
						LCD_clear_screen();
     5a6:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
					}//end of for loop 
					/***********compare passwords**************/
					if (EEPROM_read(EEPROM_ADMIN_ADDRESS)==pass[0]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+1)==pass[1]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+2)==pass[2]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+3)==pass[3])
					{
						login_mode = ADMIN;
						pass_tries_count = 0;
     5aa:	e1 2c       	mov	r14, r1
						LCD_send_char(PASS_SYMPOL);
					}//end of for loop 
					/***********compare passwords**************/
					if (EEPROM_read(EEPROM_ADMIN_ADDRESS)==pass[0]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+1)==pass[1]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+2)==pass[2]&&EEPROM_read(EEPROM_ADMIN_ADDRESS+3)==pass[3])
					{
						login_mode = ADMIN;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
						LCD_move_cursor(2,1);
						LCD_send_string("Admin mode");
						_delay_ms(500);
						LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);
						timer_CTC_init_interrupt();///////////////////////////////////
						LCD_clear_screen();
     5ae:	2c c0       	rjmp	.+88     	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
					}
					else/*********in case of wrong password*****************/
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     5b0:	e3 94       	inc	r14
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     5b2:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
						LCD_send_string("Wrong Pass");
     5b6:	80 e7       	ldi	r24, 0x70	; 112
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
						LCD_move_cursor(2,1);
     5be:	61 e0       	ldi	r22, 0x01	; 1
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
						LCD_send_string("Tries left:");
     5c6:	8b e7       	ldi	r24, 0x7B	; 123
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
						LCD_send_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     5ce:	83 e3       	ldi	r24, 0x33	; 51
     5d0:	8e 19       	sub	r24, r14
     5d2:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
     5d6:	9f ef       	ldi	r25, 0xFF	; 255
     5d8:	29 e6       	ldi	r18, 0x69	; 105
     5da:	38 e1       	ldi	r19, 0x18	; 24
     5dc:	91 50       	subi	r25, 0x01	; 1
     5de:	20 40       	sbci	r18, 0x00	; 0
     5e0:	30 40       	sbci	r19, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <__EEPROM_REGION_LENGTH__+0x1dc>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <__EEPROM_REGION_LENGTH__+0x1e6>
     5e6:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     5e8:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	8e 15       	cp	r24, r14
     5f0:	40 f4       	brcc	.+16     	; 0x602 <__EEPROM_REGION_LENGTH__+0x202>
						{
							EEPROM_write(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 4a 07 	call	0xe94	; 0xe94 <EEPROM_write>
							block_mode_flag = TRUE;//turn on block mode
     5fc:	cc 24       	eor	r12, r12
     5fe:	c3 94       	inc	r12
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 
     600:	b3 c0       	rjmp	.+358    	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
						LCD_clear_screen();
					}
					else/*********in case of wrong password*****************/
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
     602:	8f 2d       	mov	r24, r15
     604:	01 c0       	rjmp	.+2      	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
				continue;
			}
			/*************************************************************************************************/
			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
			switch (key_pressed)
     606:	8f 2d       	mov	r24, r15
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE :
				while (login_mode!=ADMIN)
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	09 f0       	breq	.+2      	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
     60c:	56 cf       	rjmp	.-340    	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
     60e:	f8 2e       	mov	r15, r24
     610:	ab c0       	rjmp	.+342    	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
				break;//break of switch case
				/********************************* Guest login **********************************************/
				case CHECK_GUEST_MODE:
				while (login_mode!=GUEST)
				{
					LCD_clear_screen();
     612:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
					LCD_send_string("Guest mode");
     616:	87 e8       	ldi	r24, 0x87	; 135
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
					LCD_move_cursor(2,1);
     61e:	61 e0       	ldi	r22, 0x01	; 1
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
					LCD_send_string("Enter pass:");
     626:	85 e5       	ldi	r24, 0x55	; 85
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     62e:	9f ef       	ldi	r25, 0xFF	; 255
     630:	21 ee       	ldi	r18, 0xE1	; 225
     632:	34 e0       	ldi	r19, 0x04	; 4
     634:	91 50       	subi	r25, 0x01	; 1
     636:	20 40       	sbci	r18, 0x00	; 0
     638:	30 40       	sbci	r19, 0x00	; 0
     63a:	e1 f7       	brne	.-8      	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <__EEPROM_REGION_LENGTH__+0x23e>
     63e:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     640:	d1 2c       	mov	r13, r1
     642:	21 c0       	rjmp	.+66     	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
					{
						do
						{
							pass[pass_counter] = keypad_u8check_press();
     644:	0d 2d       	mov	r16, r13
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	0e 94 9a 07 	call	0xf34	; 0xf34 <keypad_u8check_press>
     64c:	e1 e0       	ldi	r30, 0x01	; 1
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	ec 0f       	add	r30, r28
     652:	fd 1f       	adc	r31, r29
     654:	e0 0f       	add	r30, r16
     656:	f1 1f       	adc	r31, r17
     658:	80 83       	st	Z, r24
						} while (pass[pass_counter]==NOT_STORED);
     65a:	8f 3f       	cpi	r24, 0xFF	; 255
     65c:	99 f3       	breq	.-26     	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
						LCD_send_char(pass[pass_counter]);
     65e:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	92 e5       	ldi	r25, 0x52	; 82
     666:	27 e0       	ldi	r18, 0x07	; 7
     668:	81 50       	subi	r24, 0x01	; 1
     66a:	90 40       	sbci	r25, 0x00	; 0
     66c:	20 40       	sbci	r18, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <__EEPROM_REGION_LENGTH__+0x268>
     670:	00 c0       	rjmp	.+0      	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
     672:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);
						LCD_move_cursor(2,12+pass_counter);
     674:	6c e0       	ldi	r22, 0x0C	; 12
     676:	6d 0d       	add	r22, r13
     678:	82 e0       	ldi	r24, 0x02	; 2
     67a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
						LCD_send_char(PASS_SYMPOL);
     67e:	8a e2       	ldi	r24, 0x2A	; 42
     680:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
					LCD_clear_screen();
					LCD_send_string("Guest mode");
					LCD_move_cursor(2,1);
					LCD_send_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					for(pass_counter=0;pass_counter<PASS_SIZE;pass_counter++)
     684:	d3 94       	inc	r13
     686:	33 e0       	ldi	r19, 0x03	; 3
     688:	3d 15       	cp	r19, r13
     68a:	e0 f6       	brcc	.-72     	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
						_delay_ms(CHARACTER_PREVIEW_TIME);
						LCD_move_cursor(2,12+pass_counter);
						LCD_send_char(PASS_SYMPOL);
					}//end of for loop
					/****************compare passwords*/
					if (EEPROM_read(EEPROM_GUEST_ADDRESS)==pass[0]&&EEPROM_read(EEPROM_GUEST_ADDRESS+1)==pass[1]&&EEPROM_read(EEPROM_GUEST_ADDRESS+2)==pass[2]&&EEPROM_read(EEPROM_GUEST_ADDRESS+3)==pass[3])
     68c:	86 e0       	ldi	r24, 0x06	; 6
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     694:	99 81       	ldd	r25, Y+1	; 0x01
     696:	89 13       	cpse	r24, r25
     698:	37 c0       	rjmp	.+110    	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
     69a:	87 e0       	ldi	r24, 0x07	; 7
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	89 13       	cpse	r24, r25
     6a6:	30 c0       	rjmp	.+96     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
     6a8:	88 e0       	ldi	r24, 0x08	; 8
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     6b0:	9b 81       	ldd	r25, Y+3	; 0x03
     6b2:	89 13       	cpse	r24, r25
     6b4:	29 c0       	rjmp	.+82     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
     6b6:	89 e0       	ldi	r24, 0x09	; 9
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 56 07 	call	0xeac	; 0xeac <EEPROM_read>
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	89 13       	cpse	r24, r25
     6c2:	22 c0       	rjmp	.+68     	; 0x708 <__EEPROM_REGION_LENGTH__+0x308>
					{
						login_mode = GUEST;
						pass_tries_count = 0;
						LCD_clear_screen();
     6c4:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
						LCD_send_string("Right password");
     6c8:	81 e6       	ldi	r24, 0x61	; 97
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
						LCD_move_cursor(2,1);
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
						LCD_send_string("Guest mode");
     6d8:	87 e8       	ldi	r24, 0x87	; 135
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     6e0:	8f ef       	ldi	r24, 0xFF	; 255
     6e2:	94 e3       	ldi	r25, 0x34	; 52
     6e4:	2c e0       	ldi	r18, 0x0C	; 12
     6e6:	81 50       	subi	r24, 0x01	; 1
     6e8:	90 40       	sbci	r25, 0x00	; 0
     6ea:	20 40       	sbci	r18, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <__EEPROM_REGION_LENGTH__+0x2e6>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <__EEPROM_REGION_LENGTH__+0x2f0>
     6f0:	00 00       	nop
						_delay_ms(500);
						LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	83 e4       	ldi	r24, 0x43	; 67
     6f6:	0e 94 80 09 	call	0x1300	; 0x1300 <LED_vTurnOn>
						timer_CTC_init_interrupt();//////////////////////////////////
     6fa:	0e 94 8e 0a 	call	0x151c	; 0x151c <timer_CTC_init_interrupt>
						LCD_clear_screen();
     6fe:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
					}//end of for loop
					/****************compare passwords*/
					if (EEPROM_read(EEPROM_GUEST_ADDRESS)==pass[0]&&EEPROM_read(EEPROM_GUEST_ADDRESS+1)==pass[1]&&EEPROM_read(EEPROM_GUEST_ADDRESS+2)==pass[2]&&EEPROM_read(EEPROM_GUEST_ADDRESS+3)==pass[3])
					{
						login_mode = GUEST;
						pass_tries_count = 0;
     702:	e1 2c       	mov	r14, r1
						LCD_send_char(PASS_SYMPOL);
					}//end of for loop
					/****************compare passwords*/
					if (EEPROM_read(EEPROM_GUEST_ADDRESS)==pass[0]&&EEPROM_read(EEPROM_GUEST_ADDRESS+1)==pass[1]&&EEPROM_read(EEPROM_GUEST_ADDRESS+2)==pass[2]&&EEPROM_read(EEPROM_GUEST_ADDRESS+3)==pass[3])
					{
						login_mode = GUEST;
     704:	82 e0       	ldi	r24, 0x02	; 2
						LCD_move_cursor(2,1);
						LCD_send_string("Guest mode");
						_delay_ms(500);
						LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);
						timer_CTC_init_interrupt();//////////////////////////////////
						LCD_clear_screen();
     706:	2c c0       	rjmp	.+88     	; 0x760 <__EEPROM_REGION_LENGTH__+0x360>
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     708:	e3 94       	inc	r14
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     70a:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
						LCD_send_string("Wrong Pass");
     70e:	80 e7       	ldi	r24, 0x70	; 112
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
						LCD_move_cursor(2,1);
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
						LCD_send_string("Tries left:");
     71e:	8b e7       	ldi	r24, 0x7B	; 123
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
						LCD_send_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     726:	83 e3       	ldi	r24, 0x33	; 51
     728:	8e 19       	sub	r24, r14
     72a:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
     72e:	3f ef       	ldi	r19, 0xFF	; 255
     730:	89 e6       	ldi	r24, 0x69	; 105
     732:	98 e1       	ldi	r25, 0x18	; 24
     734:	31 50       	subi	r19, 0x01	; 1
     736:	80 40       	sbci	r24, 0x00	; 0
     738:	90 40       	sbci	r25, 0x00	; 0
     73a:	e1 f7       	brne	.-8      	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <__EEPROM_REGION_LENGTH__+0x33e>
     73e:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     740:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     744:	22 e0       	ldi	r18, 0x02	; 2
     746:	2e 15       	cp	r18, r14
     748:	40 f4       	brcc	.+16     	; 0x75a <__EEPROM_REGION_LENGTH__+0x35a>
						{
							EEPROM_write(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	8a e0       	ldi	r24, 0x0A	; 10
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 4a 07 	call	0xe94	; 0xe94 <EEPROM_write>
							block_mode_flag = TRUE;//turn on block mode
     754:	cc 24       	eor	r12, r12
     756:	c3 94       	inc	r12
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line
     758:	07 c0       	rjmp	.+14     	; 0x768 <__EEPROM_REGION_LENGTH__+0x368>
						LCD_clear_screen();
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
     75a:	8f 2d       	mov	r24, r15
     75c:	01 c0       	rjmp	.+2      	; 0x760 <__EEPROM_REGION_LENGTH__+0x360>
				continue;
			}
			/*************************************************************************************************/
			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
			switch (key_pressed)
     75e:	8f 2d       	mov	r24, r15
				}//end of while loop
				
				break;//break of switch case
				/********************************* Guest login **********************************************/
				case CHECK_GUEST_MODE:
				while (login_mode!=GUEST)
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	09 f0       	breq	.+2      	; 0x766 <__EEPROM_REGION_LENGTH__+0x366>
     764:	56 cf       	rjmp	.-340    	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
     766:	f8 2e       	mov	r15, r24
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
			LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_send_string("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     768:	ff 20       	and	r15, r15
     76a:	09 f4       	brne	.+2      	; 0x76e <__EEPROM_REGION_LENGTH__+0x36e>
     76c:	4a ce       	rjmp	.-876    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     76e:	01 e0       	ldi	r16, 0x01	; 1
     770:	be c1       	rjmp	.+892    	; 0xaee <__stack+0x28f>
				uint8 show_menu = MAIN_MENU;
				
					while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
					{
						key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
						switch(show_menu)
     772:	80 2f       	mov	r24, r16
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	fc 01       	movw	r30, r24
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	ea 30       	cpi	r30, 0x0A	; 10
     77c:	f1 05       	cpc	r31, r1
     77e:	08 f0       	brcs	.+2      	; 0x782 <__EEPROM_REGION_LENGTH__+0x382>
     780:	b6 c1       	rjmp	.+876    	; 0xaee <__stack+0x28f>
     782:	e6 5d       	subi	r30, 0xD6	; 214
     784:	ff 4f       	sbci	r31, 0xFF	; 255
     786:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__tablejump2__>
							
							case MAIN_MENU:
							while(((key_pressed < '1') || (key_pressed > '4')) && (timeout_flag == FALSE))
							{
								/******************** print main Menu ******************/
								LCD_clear_screen();
     78a:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
								LCD_send_string("1:Room1 2:Room2");
     78e:	82 e9       	ldi	r24, 0x92	; 146
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
								LCD_move_cursor(2,1);
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	82 e0       	ldi	r24, 0x02	; 2
     79a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
								if(login_mode==ADMIN)//check login mode
     79e:	31 e0       	ldi	r19, 0x01	; 1
     7a0:	f3 12       	cpse	r15, r19
     7a2:	05 c0       	rjmp	.+10     	; 0x7ae <__EEPROM_REGION_LENGTH__+0x3ae>
								{
									LCD_send_string("3:Room3 4:More ");//this menu options only printed if the logged in user is an admin
     7a4:	82 ea       	ldi	r24, 0xA2	; 162
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     7ac:	07 c0       	rjmp	.+14     	; 0x7bc <__EEPROM_REGION_LENGTH__+0x3bc>
								}
								else if(login_mode==GUEST)//check login mode
     7ae:	82 e0       	ldi	r24, 0x02	; 2
     7b0:	f8 12       	cpse	r15, r24
     7b2:	04 c0       	rjmp	.+8      	; 0x7bc <__EEPROM_REGION_LENGTH__+0x3bc>
								{
									LCD_send_string("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
     7b4:	82 eb       	ldi	r24, 0xB2	; 178
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
								}
								/*******************************************************/
								
								key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     7bc:	8f 2d       	mov	r24, r15
     7be:	0e 94 88 09 	call	0x1310	; 0x1310 <u8GetKeyPressed>
     7c2:	18 2f       	mov	r17, r24
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	20 e7       	ldi	r18, 0x70	; 112
     7c8:	32 e0       	ldi	r19, 0x02	; 2
     7ca:	91 50       	subi	r25, 0x01	; 1
     7cc:	20 40       	sbci	r18, 0x00	; 0
     7ce:	30 40       	sbci	r19, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <__EEPROM_REGION_LENGTH__+0x3ca>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <__EEPROM_REGION_LENGTH__+0x3d4>
     7d4:	00 00       	nop
								_delay_ms(100);//to avoid the duplication of the pressed key
								
								if (key_pressed == SELECT_ROOM1)//If key pressed is 1
     7d6:	81 33       	cpi	r24, 0x31	; 49
     7d8:	01 f1       	breq	.+64     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
								{
									show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
								}
								else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
     7da:	82 33       	cpi	r24, 0x32	; 50
     7dc:	01 f1       	breq	.+64     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
								{
									show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
								}
								else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
     7de:	83 33       	cpi	r24, 0x33	; 51
     7e0:	01 f1       	breq	.+64     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
								{
									show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
								}
								else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
     7e2:	84 33       	cpi	r24, 0x34	; 52
     7e4:	19 f4       	brne	.+6      	; 0x7ec <__EEPROM_REGION_LENGTH__+0x3ec>
     7e6:	82 e0       	ldi	r24, 0x02	; 2
     7e8:	f8 16       	cp	r15, r24
     7ea:	e9 f0       	breq	.+58     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
								{
									show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
								}
								else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
     7ec:	14 33       	cpi	r17, 0x34	; 52
     7ee:	19 f4       	brne	.+6      	; 0x7f6 <__EEPROM_REGION_LENGTH__+0x3f6>
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	f9 16       	cp	r15, r25
     7f4:	d1 f0       	breq	.+52     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
								{
									show_menu = MORE_MENU;//Set the next menu to be shown to more menu
								}
								else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     7f6:	1f 3f       	cpi	r17, 0xFF	; 255
     7f8:	d9 f0       	breq	.+54     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
								{
									LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7fa:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
									LCD_send_string("Wrong input");//print error message
     7fe:	82 ec       	ldi	r24, 0xC2	; 194
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     806:	2f ef       	ldi	r18, 0xFF	; 255
     808:	34 e3       	ldi	r19, 0x34	; 52
     80a:	8c e0       	ldi	r24, 0x0C	; 12
     80c:	21 50       	subi	r18, 0x01	; 1
     80e:	30 40       	sbci	r19, 0x00	; 0
     810:	80 40       	sbci	r24, 0x00	; 0
     812:	e1 f7       	brne	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     814:	00 c0       	rjmp	.+0      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     816:	00 00       	nop
     818:	0b c0       	rjmp	.+22     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
								key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
								_delay_ms(100);//to avoid the duplication of the pressed key
								
								if (key_pressed == SELECT_ROOM1)//If key pressed is 1
								{
									show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     81a:	03 e0       	ldi	r16, 0x03	; 3
     81c:	09 c0       	rjmp	.+18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
								}
								else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
								{
									show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     81e:	04 e0       	ldi	r16, 0x04	; 4
     820:	07 c0       	rjmp	.+14     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
								}
								else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
								{
									show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     822:	05 e0       	ldi	r16, 0x05	; 5
     824:	05 c0       	rjmp	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
								}
								else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
								{
									show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     826:	06 e0       	ldi	r16, 0x06	; 6
     828:	03 c0       	rjmp	.+6      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
								}
								else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
								{
									show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     82a:	02 e0       	ldi	r16, 0x02	; 2
     82c:	01 c0       	rjmp	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
				uint8 show_menu = MAIN_MENU;
				
					while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
					{
						key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
						switch(show_menu)
     82e:	1f ef       	ldi	r17, 0xFF	; 255
						{
							
							case MAIN_MENU:
							while(((key_pressed < '1') || (key_pressed > '4')) && (timeout_flag == FALSE))
     830:	11 53       	subi	r17, 0x31	; 49
     832:	14 30       	cpi	r17, 0x04	; 4
     834:	08 f4       	brcc	.+2      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     836:	5b c1       	rjmp	.+694    	; 0xaee <__stack+0x28f>
     838:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     83c:	88 23       	and	r24, r24
     83e:	09 f4       	brne	.+2      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     840:	a4 cf       	rjmp	.-184    	; 0x78a <__EEPROM_REGION_LENGTH__+0x38a>
     842:	55 c1       	rjmp	.+682    	; 0xaee <__stack+0x28f>
							
							case MORE_MENU:
							while (((key_pressed < '1') || (key_pressed > '4')) && (timeout_flag == FALSE))
							{
								/******************** print more Menu ******************/
								LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     844:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
								LCD_send_string("1:Room4    2:TV   ");
     848:	8e ec       	ldi	r24, 0xCE	; 206
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
								LCD_move_cursor(2,1);
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
								LCD_send_string("3:Air Cond.4:RET");
     858:	81 ee       	ldi	r24, 0xE1	; 225
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
								/*******************************************************/
								key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     860:	8f 2d       	mov	r24, r15
     862:	0e 94 88 09 	call	0x1310	; 0x1310 <u8GetKeyPressed>
     866:	18 2f       	mov	r17, r24
     868:	9f ef       	ldi	r25, 0xFF	; 255
     86a:	20 e7       	ldi	r18, 0x70	; 112
     86c:	32 e0       	ldi	r19, 0x02	; 2
     86e:	91 50       	subi	r25, 0x01	; 1
     870:	20 40       	sbci	r18, 0x00	; 0
     872:	30 40       	sbci	r19, 0x00	; 0
     874:	e1 f7       	brne	.-8      	; 0x86e <__stack+0xf>
     876:	00 c0       	rjmp	.+0      	; 0x878 <__stack+0x19>
     878:	00 00       	nop
								_delay_ms(100);//to avoid the duplication of the pressed key
								
								if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
     87a:	81 33       	cpi	r24, 0x31	; 49
     87c:	c1 f0       	breq	.+48     	; 0x8ae <__stack+0x4f>
								{
									show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
								}
								else if (key_pressed == SELECT_TV)//If key pressed is 2
     87e:	82 33       	cpi	r24, 0x32	; 50
     880:	c1 f0       	breq	.+48     	; 0x8b2 <__stack+0x53>
								{
									show_menu = TV_MENU;//Set the next menu to be shown to TV menu
								}
								else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
     882:	83 33       	cpi	r24, 0x33	; 51
     884:	c1 f0       	breq	.+48     	; 0x8b6 <__stack+0x57>
								{
									show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
								}
								else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
     886:	84 33       	cpi	r24, 0x34	; 52
     888:	c1 f0       	breq	.+48     	; 0x8ba <__stack+0x5b>
								{
									show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
								}
								else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     88a:	8f 3f       	cpi	r24, 0xFF	; 255
     88c:	c9 f0       	breq	.+50     	; 0x8c0 <__stack+0x61>
								{
									LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     88e:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
									LCD_send_string("Wrong input");//print error message
     892:	82 ec       	ldi	r24, 0xC2	; 194
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     89a:	8f ef       	ldi	r24, 0xFF	; 255
     89c:	94 e3       	ldi	r25, 0x34	; 52
     89e:	2c e0       	ldi	r18, 0x0C	; 12
     8a0:	81 50       	subi	r24, 0x01	; 1
     8a2:	90 40       	sbci	r25, 0x00	; 0
     8a4:	20 40       	sbci	r18, 0x00	; 0
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <__stack+0x41>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <__stack+0x4b>
     8aa:	00 00       	nop
     8ac:	09 c0       	rjmp	.+18     	; 0x8c0 <__stack+0x61>
								key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
								_delay_ms(100);//to avoid the duplication of the pressed key
								
								if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
								{
									show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     8ae:	06 e0       	ldi	r16, 0x06	; 6
     8b0:	07 c0       	rjmp	.+14     	; 0x8c0 <__stack+0x61>
								}
								else if (key_pressed == SELECT_TV)//If key pressed is 2
								{
									show_menu = TV_MENU;//Set the next menu to be shown to TV menu
     8b2:	07 e0       	ldi	r16, 0x07	; 7
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <__stack+0x61>
								}
								else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
								{
									show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     8b6:	08 e0       	ldi	r16, 0x08	; 8
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <__stack+0x61>
								}
								else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
								{
									show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     8ba:	01 e0       	ldi	r16, 0x01	; 1
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__stack+0x61>
				uint8 show_menu = MAIN_MENU;
				
					while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
					{
						key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
						switch(show_menu)
     8be:	1f ef       	ldi	r17, 0xFF	; 255
								}
							}
							break;//End of main menu case
							
							case MORE_MENU:
							while (((key_pressed < '1') || (key_pressed > '4')) && (timeout_flag == FALSE))
     8c0:	11 53       	subi	r17, 0x31	; 49
     8c2:	14 30       	cpi	r17, 0x04	; 4
     8c4:	08 f4       	brcc	.+2      	; 0x8c8 <__stack+0x69>
     8c6:	13 c1       	rjmp	.+550    	; 0xaee <__stack+0x28f>
     8c8:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     8cc:	88 23       	and	r24, r24
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <__stack+0x73>
     8d0:	b9 cf       	rjmp	.-142    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     8d2:	0d c1       	rjmp	.+538    	; 0xaee <__stack+0x28f>
							break;//End of more menu case	
							case AIRCONDITIONING_MENU:	
							while (((key_pressed < '0') || (key_pressed > '2'))&& (timeout_flag == FALSE))	
							{
								/******************** print more Menu ******************/
								LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     8d4:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
								LCD_send_string("1:Set Temperature");
     8d8:	82 ef       	ldi	r24, 0xF2	; 242
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
								LCD_move_cursor(2,1);
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	82 e0       	ldi	r24, 0x02	; 2
     8e4:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
								LCD_send_string("2:control 0:RET");
     8e8:	84 e0       	ldi	r24, 0x04	; 4
     8ea:	92 e0       	ldi	r25, 0x02	; 2
     8ec:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
								/*******************************************************/
								key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     8f0:	8f 2d       	mov	r24, r15
     8f2:	0e 94 88 09 	call	0x1310	; 0x1310 <u8GetKeyPressed>
     8f6:	18 2f       	mov	r17, r24
     8f8:	3f ef       	ldi	r19, 0xFF	; 255
     8fa:	80 e7       	ldi	r24, 0x70	; 112
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	31 50       	subi	r19, 0x01	; 1
     900:	80 40       	sbci	r24, 0x00	; 0
     902:	90 40       	sbci	r25, 0x00	; 0
     904:	e1 f7       	brne	.-8      	; 0x8fe <__stack+0x9f>
     906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0xa9>
     908:	00 00       	nop
								_delay_ms(100);//to avoid the duplication of the pressed key
								
								if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
     90a:	11 33       	cpi	r17, 0x31	; 49
     90c:	b1 f0       	breq	.+44     	; 0x93a <__stack+0xdb>
								{
									show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
								}
								else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
     90e:	12 33       	cpi	r17, 0x32	; 50
     910:	b1 f0       	breq	.+44     	; 0x93e <__stack+0xdf>
								{
									show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
								}
								else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
     912:	10 33       	cpi	r17, 0x30	; 48
     914:	b1 f0       	breq	.+44     	; 0x942 <__stack+0xe3>
								{
									show_menu = MORE_MENU;//Set the next menu to be shown to more menu
								}
								else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     916:	1f 3f       	cpi	r17, 0xFF	; 255
     918:	b9 f0       	breq	.+46     	; 0x948 <__stack+0xe9>
								{
									LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     91a:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
									LCD_send_string("Wrong input");//print error message
     91e:	82 ec       	ldi	r24, 0xC2	; 194
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     926:	2f ef       	ldi	r18, 0xFF	; 255
     928:	34 e3       	ldi	r19, 0x34	; 52
     92a:	8c e0       	ldi	r24, 0x0C	; 12
     92c:	21 50       	subi	r18, 0x01	; 1
     92e:	30 40       	sbci	r19, 0x00	; 0
     930:	80 40       	sbci	r24, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0xcd>
     934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0xd7>
     936:	00 00       	nop
     938:	07 c0       	rjmp	.+14     	; 0x948 <__stack+0xe9>
								key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
								_delay_ms(100);//to avoid the duplication of the pressed key
								
								if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
								{
									show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     93a:	0a e0       	ldi	r16, 0x0A	; 10
     93c:	05 c0       	rjmp	.+10     	; 0x948 <__stack+0xe9>
								}
								else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
								{
									show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     93e:	09 e0       	ldi	r16, 0x09	; 9
     940:	03 c0       	rjmp	.+6      	; 0x948 <__stack+0xe9>
								}
								else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
								{
									show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     942:	02 e0       	ldi	r16, 0x02	; 2
     944:	01 c0       	rjmp	.+2      	; 0x948 <__stack+0xe9>
				uint8 show_menu = MAIN_MENU;
				
					while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
					{
						key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
						switch(show_menu)
     946:	1f ef       	ldi	r17, 0xFF	; 255
									_delay_ms(500);//Halt the system for the given time in (ms)
								}
							}
							break;//End of more menu case	
							case AIRCONDITIONING_MENU:	
							while (((key_pressed < '0') || (key_pressed > '2'))&& (timeout_flag == FALSE))	
     948:	10 53       	subi	r17, 0x30	; 48
     94a:	13 30       	cpi	r17, 0x03	; 3
     94c:	08 f4       	brcc	.+2      	; 0x950 <__stack+0xf1>
     94e:	cf c0       	rjmp	.+414    	; 0xaee <__stack+0x28f>
     950:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     954:	88 23       	and	r24, r24
     956:	09 f4       	brne	.+2      	; 0x95a <__stack+0xfb>
     958:	bd cf       	rjmp	.-134    	; 0x8d4 <__stack+0x75>
     95a:	c9 c0       	rjmp	.+402    	; 0xaee <__stack+0x28f>
								}
							}
							
							break;//End of more menu case	
							case ROOM1_MENU :
							vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
     95c:	6f 2d       	mov	r22, r15
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	0e 94 a8 09 	call	0x1350	; 0x1350 <vMenuOption>
							show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     964:	01 e0       	ldi	r16, 0x01	; 1
							break;	//End of room1 menu case
     966:	c3 c0       	rjmp	.+390    	; 0xaee <__stack+0x28f>
							
							case ROOM2_MENU :
							vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 1
     968:	6f 2d       	mov	r22, r15
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	0e 94 a8 09 	call	0x1350	; 0x1350 <vMenuOption>
							show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     970:	01 e0       	ldi	r16, 0x01	; 1
							break;//End of room2 menu case
     972:	bd c0       	rjmp	.+378    	; 0xaee <__stack+0x28f>
							
							case ROOM3_MENU :
							vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 1
     974:	6f 2d       	mov	r22, r15
     976:	85 e0       	ldi	r24, 0x05	; 5
     978:	0e 94 a8 09 	call	0x1350	; 0x1350 <vMenuOption>
							show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     97c:	01 e0       	ldi	r16, 0x01	; 1
							break;//End of room3 menu case
     97e:	b7 c0       	rjmp	.+366    	; 0xaee <__stack+0x28f>
							
							case ROOM4_MENU :
							vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 1
     980:	6f 2d       	mov	r22, r15
     982:	86 e0       	ldi	r24, 0x06	; 6
     984:	0e 94 a8 09 	call	0x1350	; 0x1350 <vMenuOption>
							if (login_mode == GUEST)//in case of guest is logged in
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	f9 12       	cpse	r15, r25
     98c:	a9 c0       	rjmp	.+338    	; 0xae0 <__stack+0x281>
							{
								show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     98e:	01 e0       	ldi	r16, 0x01	; 1
     990:	ae c0       	rjmp	.+348    	; 0xaee <__stack+0x28f>
							{
								show_menu = MORE_MENU;//Set the next menu to be shown to more menu
							}
							break;//End of room4 menu case
							case TV_MENU:
							vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
     992:	6f 2d       	mov	r22, r15
     994:	87 e0       	ldi	r24, 0x07	; 7
     996:	0e 94 a8 09 	call	0x1350	; 0x1350 <vMenuOption>
							show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     99a:	02 e0       	ldi	r16, 0x02	; 2
							break;//End of TV menu case
     99c:	a8 c0       	rjmp	.+336    	; 0xaee <__stack+0x28f>
							case AIRCOND_CTRL_MENU:
							vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
     99e:	6f 2d       	mov	r22, r15
     9a0:	89 e0       	ldi	r24, 0x09	; 9
     9a2:	0e 94 a8 09 	call	0x1350	; 0x1350 <vMenuOption>
							show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     9a6:	08 e0       	ldi	r16, 0x08	; 8
							break;//End of air conditioning control menu case
     9a8:	a2 c0       	rjmp	.+324    	; 0xaee <__stack+0x28f>
							case TEMPERATURE_MENU:
							temperature = 0;//clear the value of temperature
							while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
							{
								key_pressed = NOT_PRESSED;//set the key pressed to the default value
								LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9aa:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
								LCD_send_string("Set temp.:__ ");//print the format of inserting temperature
     9ae:	84 e1       	ldi	r24, 0x14	; 20
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
								LCD_send_char(DEGREES_SYMBOL); // print the symbol of degree
     9b6:	8f ed       	ldi	r24, 0xDF	; 223
     9b8:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
								LCD_send_char('C'); // print the C character
     9bc:	83 e4       	ldi	r24, 0x43	; 67
     9be:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
								LCD_move_cursor(1,11);//move the cursor to the place to write the entered temperature
     9c2:	6b e0       	ldi	r22, 0x0B	; 11
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
     9ca:	2f ef       	ldi	r18, 0xFF	; 255
     9cc:	31 ee       	ldi	r19, 0xE1	; 225
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	21 50       	subi	r18, 0x01	; 1
     9d2:	30 40       	sbci	r19, 0x00	; 0
     9d4:	80 40       	sbci	r24, 0x00	; 0
     9d6:	e1 f7       	brne	.-8      	; 0x9d0 <__stack+0x171>
     9d8:	00 c0       	rjmp	.+0      	; 0x9da <__stack+0x17b>
     9da:	00 00       	nop
								_delay_ms(200);//Halt the system for the given time in (ms)
							/******************************************************************************/
								key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     9dc:	8f 2d       	mov	r24, r15
     9de:	0e 94 88 09 	call	0x1310	; 0x1310 <u8GetKeyPressed>
     9e2:	9f e7       	ldi	r25, 0x7F	; 127
     9e4:	2a e1       	ldi	r18, 0x1A	; 26
     9e6:	36 e0       	ldi	r19, 0x06	; 6
     9e8:	91 50       	subi	r25, 0x01	; 1
     9ea:	20 40       	sbci	r18, 0x00	; 0
     9ec:	30 40       	sbci	r19, 0x00	; 0
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <__stack+0x189>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <__stack+0x193>
     9f2:	00 00       	nop
								_delay_ms(250);//to avoid the duplication of the pressed key

								if (timeout_flag == TRUE) //in case of the time is out before the user press a key
     9f4:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <__data_end>
     9f8:	91 30       	cpi	r25, 0x01	; 1
     9fa:	09 f4       	brne	.+2      	; 0x9fe <__stack+0x19f>
     9fc:	73 c0       	rjmp	.+230    	; 0xae4 <__stack+0x285>
										{
											break;//break the loop that ask for temperature
										}
								if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
     9fe:	10 ed       	ldi	r17, 0xD0	; 208
     a00:	18 0f       	add	r17, r24
     a02:	1a 30       	cpi	r17, 0x0A	; 10
     a04:	80 f0       	brcs	.+32     	; 0xa26 <__stack+0x1c7>
										{
											LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a06:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
											LCD_send_string("Wrong input");//print error message
     a0a:	82 ec       	ldi	r24, 0xC2	; 194
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	94 e3       	ldi	r25, 0x34	; 52
     a16:	2c e0       	ldi	r18, 0x0C	; 12
     a18:	81 50       	subi	r24, 0x01	; 1
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	20 40       	sbci	r18, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <__stack+0x1b9>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <__stack+0x1c3>
     a22:	00 00       	nop
											_delay_ms(500);//Halt the system for the given time in (ms)
											continue;//return to #while (temperature==0)# line 672
     a24:	54 c0       	rjmp	.+168    	; 0xace <__stack+0x26f>
										}
								else//if the value is valid
									{
										LCD_send_char(key_pressed);//print the value on the lcd
     a26:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
										temp_tens = key_pressed-ASCII_ZERO;//save the entered value
										key_pressed = NOT_PRESSED;//set the key pressed to the default value
									}
									/*******************************************************************************/
									key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     a2a:	8f 2d       	mov	r24, r15
     a2c:	0e 94 88 09 	call	0x1310	; 0x1310 <u8GetKeyPressed>
     a30:	3f e7       	ldi	r19, 0x7F	; 127
     a32:	9a e1       	ldi	r25, 0x1A	; 26
     a34:	26 e0       	ldi	r18, 0x06	; 6
     a36:	31 50       	subi	r19, 0x01	; 1
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	20 40       	sbci	r18, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <__stack+0x1d7>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <__stack+0x1e1>
     a40:	00 00       	nop
									_delay_ms(250);//to avoid the duplication of the pressed key
												
									if (timeout_flag == TRUE)//if the user session is timeout
     a42:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <__data_end>
     a46:	91 30       	cpi	r25, 0x01	; 1
     a48:	09 f4       	brne	.+2      	; 0xa4c <__stack+0x1ed>
     a4a:	4e c0       	rjmp	.+156    	; 0xae8 <__stack+0x289>
										{
											break;//break the loop that ask for temperature
										}
									if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f0 ed       	ldi	r31, 0xD0	; 208
     a50:	ef 2e       	mov	r14, r31
     a52:	f0 2d       	mov	r31, r0
     a54:	e8 0e       	add	r14, r24
     a56:	39 e0       	ldi	r19, 0x09	; 9
     a58:	3e 15       	cp	r19, r14
     a5a:	80 f4       	brcc	.+32     	; 0xa7c <__stack+0x21d>
										{
											LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a5c:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
											LCD_send_string("Wrong input");//print error message
     a60:	82 ec       	ldi	r24, 0xC2	; 194
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	94 e3       	ldi	r25, 0x34	; 52
     a6c:	2c e0       	ldi	r18, 0x0C	; 12
     a6e:	81 50       	subi	r24, 0x01	; 1
     a70:	90 40       	sbci	r25, 0x00	; 0
     a72:	20 40       	sbci	r18, 0x00	; 0
     a74:	e1 f7       	brne	.-8      	; 0xa6e <__stack+0x20f>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <__stack+0x219>
     a78:	00 00       	nop
											_delay_ms(500);//Halt the system for the given time in (ms)
											continue;//repeat the loop that ask for the temperature
     a7a:	29 c0       	rjmp	.+82     	; 0xace <__stack+0x26f>
										}
									else//if the value is valid
										{
											LCD_send_char(key_pressed);//print the value on the lcd
     a7c:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
											temp_ones = key_pressed-ASCII_ZERO;//save the entered value
											key_pressed = NOT_PRESSED;//set the key pressed to the default value
										}
									temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
     a80:	11 0f       	add	r17, r17
     a82:	01 2f       	mov	r16, r17
     a84:	00 0f       	add	r16, r16
     a86:	00 0f       	add	r16, r16
     a88:	10 0f       	add	r17, r16
     a8a:	01 2f       	mov	r16, r17
     a8c:	0e 0d       	add	r16, r14
									SPI_MasterTransmit_Data(SET_TEMPERATURE);//Send the code of set temperature
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	0e 94 81 0a 	call	0x1502	; 0x1502 <SPI_MasterTransmit_Data>
     a94:	3f ef       	ldi	r19, 0xFF	; 255
     a96:	81 ee       	ldi	r24, 0xE1	; 225
     a98:	94 e0       	ldi	r25, 0x04	; 4
     a9a:	31 50       	subi	r19, 0x01	; 1
     a9c:	80 40       	sbci	r24, 0x00	; 0
     a9e:	90 40       	sbci	r25, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <__stack+0x23b>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <__stack+0x245>
     aa4:	00 00       	nop
									_delay_ms(200);//Halt the system to prevent write collision
									SPI_MasterTransmit_Data(temperature);//send the entered temperature
     aa6:	80 2f       	mov	r24, r16
     aa8:	0e 94 81 0a 	call	0x1502	; 0x1502 <SPI_MasterTransmit_Data>
									LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     aac:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
									LCD_send_string("Temperature Sent");//show the message
     ab0:	82 e2       	ldi	r24, 0x22	; 34
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
     ab8:	2f ef       	ldi	r18, 0xFF	; 255
     aba:	34 e3       	ldi	r19, 0x34	; 52
     abc:	8c e0       	ldi	r24, 0x0C	; 12
     abe:	21 50       	subi	r18, 0x01	; 1
     ac0:	30 40       	sbci	r19, 0x00	; 0
     ac2:	80 40       	sbci	r24, 0x00	; 0
     ac4:	e1 f7       	brne	.-8      	; 0xabe <__stack+0x25f>
     ac6:	00 c0       	rjmp	.+0      	; 0xac8 <__stack+0x269>
     ac8:	00 00       	nop
     aca:	01 c0       	rjmp	.+2      	; 0xace <__stack+0x26f>
				uint8 show_menu = MAIN_MENU;
				
					while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
					{
						key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
						switch(show_menu)
     acc:	00 e0       	ldi	r16, 0x00	; 0
							show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
							break;//End of air conditioning control menu case
							/**********************************************************************************************/
							case TEMPERATURE_MENU:
							temperature = 0;//clear the value of temperature
							while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
     ace:	01 11       	cpse	r16, r1
     ad0:	0d c0       	rjmp	.+26     	; 0xaec <__stack+0x28d>
     ad2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     ad6:	88 23       	and	r24, r24
     ad8:	09 f4       	brne	.+2      	; 0xadc <__stack+0x27d>
     ada:	67 cf       	rjmp	.-306    	; 0x9aa <__stack+0x14b>
									SPI_MasterTransmit_Data(temperature);//send the entered temperature
									LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
									LCD_send_string("Temperature Sent");//show the message
									_delay_ms(500);//Halt the system for the given time in (ms)
										}
									show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     adc:	08 e0       	ldi	r16, 0x08	; 8
     ade:	07 c0       	rjmp	.+14     	; 0xaee <__stack+0x28f>
							{
								show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
							}
							else//in case of admin is logged in
							{
								show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     ae0:	02 e0       	ldi	r16, 0x02	; 2
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <__stack+0x28f>
									SPI_MasterTransmit_Data(temperature);//send the entered temperature
									LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
									LCD_send_string("Temperature Sent");//show the message
									_delay_ms(500);//Halt the system for the given time in (ms)
										}
									show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     ae4:	08 e0       	ldi	r16, 0x08	; 8
     ae6:	03 c0       	rjmp	.+6      	; 0xaee <__stack+0x28f>
     ae8:	08 e0       	ldi	r16, 0x08	; 8
     aea:	01 c0       	rjmp	.+2      	; 0xaee <__stack+0x28f>
     aec:	08 e0       	ldi	r16, 0x08	; 8
		/**********************************************************************************************/
		/**********************************************************************************************/
		/**********************************************************************************************/
				uint8 show_menu = MAIN_MENU;
				
					while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
     aee:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
     af2:	81 30       	cpi	r24, 0x01	; 1
     af4:	09 f0       	breq	.+2      	; 0xaf8 <__stack+0x299>
     af6:	3d ce       	rjmp	.-902    	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
     af8:	5e cc       	rjmp	.-1860   	; 0x3b6 <main+0x1f0>

00000afa <__vector_10>:
						}//End of the switch
					}//End of while that repeats the menu after each successful action till session timeout
	}//end of while(1)
}//end of main
ISR(TIMER0_COMP_vect)
{
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	8f 93       	push	r24
     b06:	9f 93       	push	r25
	session_counter++;//increase the indicator of session time for every tick
     b08:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <session_counter>
     b0c:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <session_counter+0x1>
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	90 93 84 02 	sts	0x0284, r25	; 0x800284 <session_counter+0x1>
     b16:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <session_counter>
     b1a:	9f 91       	pop	r25
     b1c:	8f 91       	pop	r24
     b1e:	0f 90       	pop	r0
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	0f 90       	pop	r0
     b24:	1f 90       	pop	r1
     b26:	18 95       	reti

00000b28 <DIO_SET_PIN_DIR>:
		valu = PIND;
		break;
		default:break;
	}
	return valu;	
}
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	fc 01       	movw	r30, r24
     b2c:	e1 54       	subi	r30, 0x41	; 65
     b2e:	f1 09       	sbc	r31, r1
     b30:	e4 32       	cpi	r30, 0x24	; 36
     b32:	f1 05       	cpc	r31, r1
     b34:	08 f0       	brcs	.+2      	; 0xb38 <DIO_SET_PIN_DIR+0x10>
     b36:	67 c0       	rjmp	.+206    	; 0xc06 <DIO_SET_PIN_DIR+0xde>
     b38:	ec 5c       	subi	r30, 0xCC	; 204
     b3a:	ff 4f       	sbci	r31, 0xFF	; 255
     b3c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__tablejump2__>
     b40:	41 30       	cpi	r20, 0x01	; 1
     b42:	59 f4       	brne	.+22     	; 0xb5a <DIO_SET_PIN_DIR+0x32>
     b44:	2a b3       	in	r18, 0x1a	; 26
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 c0       	rjmp	.+4      	; 0xb50 <DIO_SET_PIN_DIR+0x28>
     b4c:	88 0f       	add	r24, r24
     b4e:	99 1f       	adc	r25, r25
     b50:	6a 95       	dec	r22
     b52:	e2 f7       	brpl	.-8      	; 0xb4c <DIO_SET_PIN_DIR+0x24>
     b54:	82 2b       	or	r24, r18
     b56:	8a bb       	out	0x1a, r24	; 26
     b58:	08 95       	ret
     b5a:	2a b3       	in	r18, 0x1a	; 26
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <DIO_SET_PIN_DIR+0x3e>
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	6a 95       	dec	r22
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <DIO_SET_PIN_DIR+0x3a>
     b6a:	80 95       	com	r24
     b6c:	82 23       	and	r24, r18
     b6e:	8a bb       	out	0x1a, r24	; 26
     b70:	08 95       	ret
     b72:	41 30       	cpi	r20, 0x01	; 1
     b74:	59 f4       	brne	.+22     	; 0xb8c <DIO_SET_PIN_DIR+0x64>
     b76:	27 b3       	in	r18, 0x17	; 23
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <DIO_SET_PIN_DIR+0x5a>
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	6a 95       	dec	r22
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <DIO_SET_PIN_DIR+0x56>
     b86:	82 2b       	or	r24, r18
     b88:	87 bb       	out	0x17, r24	; 23
     b8a:	08 95       	ret
     b8c:	27 b3       	in	r18, 0x17	; 23
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	02 c0       	rjmp	.+4      	; 0xb98 <DIO_SET_PIN_DIR+0x70>
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	6a 95       	dec	r22
     b9a:	e2 f7       	brpl	.-8      	; 0xb94 <DIO_SET_PIN_DIR+0x6c>
     b9c:	80 95       	com	r24
     b9e:	82 23       	and	r24, r18
     ba0:	87 bb       	out	0x17, r24	; 23
     ba2:	08 95       	ret
     ba4:	41 30       	cpi	r20, 0x01	; 1
     ba6:	59 f4       	brne	.+22     	; 0xbbe <DIO_SET_PIN_DIR+0x96>
     ba8:	24 b3       	in	r18, 0x14	; 20
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <DIO_SET_PIN_DIR+0x8c>
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	6a 95       	dec	r22
     bb6:	e2 f7       	brpl	.-8      	; 0xbb0 <DIO_SET_PIN_DIR+0x88>
     bb8:	82 2b       	or	r24, r18
     bba:	84 bb       	out	0x14, r24	; 20
     bbc:	08 95       	ret
     bbe:	24 b3       	in	r18, 0x14	; 20
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <DIO_SET_PIN_DIR+0xa2>
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	6a 95       	dec	r22
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <DIO_SET_PIN_DIR+0x9e>
     bce:	80 95       	com	r24
     bd0:	82 23       	and	r24, r18
     bd2:	84 bb       	out	0x14, r24	; 20
     bd4:	08 95       	ret
     bd6:	41 30       	cpi	r20, 0x01	; 1
     bd8:	59 f4       	brne	.+22     	; 0xbf0 <DIO_SET_PIN_DIR+0xc8>
     bda:	21 b3       	in	r18, 0x11	; 17
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <DIO_SET_PIN_DIR+0xbe>
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	6a 95       	dec	r22
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <DIO_SET_PIN_DIR+0xba>
     bea:	82 2b       	or	r24, r18
     bec:	81 bb       	out	0x11, r24	; 17
     bee:	08 95       	ret
     bf0:	21 b3       	in	r18, 0x11	; 17
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <DIO_SET_PIN_DIR+0xd4>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	6a 95       	dec	r22
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <DIO_SET_PIN_DIR+0xd0>
     c00:	80 95       	com	r24
     c02:	82 23       	and	r24, r18
     c04:	81 bb       	out	0x11, r24	; 17
     c06:	08 95       	ret

00000c08 <DIO_WRITE_PIN>:
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	fc 01       	movw	r30, r24
     c0c:	e1 54       	subi	r30, 0x41	; 65
     c0e:	f1 09       	sbc	r31, r1
     c10:	e4 32       	cpi	r30, 0x24	; 36
     c12:	f1 05       	cpc	r31, r1
     c14:	08 f0       	brcs	.+2      	; 0xc18 <DIO_WRITE_PIN+0x10>
     c16:	67 c0       	rjmp	.+206    	; 0xce6 <DIO_WRITE_PIN+0xde>
     c18:	e8 5a       	subi	r30, 0xA8	; 168
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__tablejump2__>
     c20:	41 30       	cpi	r20, 0x01	; 1
     c22:	59 f4       	brne	.+22     	; 0xc3a <DIO_WRITE_PIN+0x32>
     c24:	2b b3       	in	r18, 0x1b	; 27
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <DIO_WRITE_PIN+0x28>
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	6a 95       	dec	r22
     c32:	e2 f7       	brpl	.-8      	; 0xc2c <DIO_WRITE_PIN+0x24>
     c34:	82 2b       	or	r24, r18
     c36:	8b bb       	out	0x1b, r24	; 27
     c38:	08 95       	ret
     c3a:	2b b3       	in	r18, 0x1b	; 27
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_WRITE_PIN+0x3e>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	6a 95       	dec	r22
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_WRITE_PIN+0x3a>
     c4a:	80 95       	com	r24
     c4c:	82 23       	and	r24, r18
     c4e:	8b bb       	out	0x1b, r24	; 27
     c50:	08 95       	ret
     c52:	41 30       	cpi	r20, 0x01	; 1
     c54:	59 f4       	brne	.+22     	; 0xc6c <DIO_WRITE_PIN+0x64>
     c56:	28 b3       	in	r18, 0x18	; 24
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 c0       	rjmp	.+4      	; 0xc62 <DIO_WRITE_PIN+0x5a>
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	6a 95       	dec	r22
     c64:	e2 f7       	brpl	.-8      	; 0xc5e <DIO_WRITE_PIN+0x56>
     c66:	82 2b       	or	r24, r18
     c68:	88 bb       	out	0x18, r24	; 24
     c6a:	08 95       	ret
     c6c:	28 b3       	in	r18, 0x18	; 24
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <DIO_WRITE_PIN+0x70>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	6a 95       	dec	r22
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <DIO_WRITE_PIN+0x6c>
     c7c:	80 95       	com	r24
     c7e:	82 23       	and	r24, r18
     c80:	88 bb       	out	0x18, r24	; 24
     c82:	08 95       	ret
     c84:	41 30       	cpi	r20, 0x01	; 1
     c86:	59 f4       	brne	.+22     	; 0xc9e <DIO_WRITE_PIN+0x96>
     c88:	25 b3       	in	r18, 0x15	; 21
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <DIO_WRITE_PIN+0x8c>
     c90:	88 0f       	add	r24, r24
     c92:	99 1f       	adc	r25, r25
     c94:	6a 95       	dec	r22
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <DIO_WRITE_PIN+0x88>
     c98:	82 2b       	or	r24, r18
     c9a:	85 bb       	out	0x15, r24	; 21
     c9c:	08 95       	ret
     c9e:	25 b3       	in	r18, 0x15	; 21
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <DIO_WRITE_PIN+0xa2>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	6a 95       	dec	r22
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <DIO_WRITE_PIN+0x9e>
     cae:	80 95       	com	r24
     cb0:	82 23       	and	r24, r18
     cb2:	85 bb       	out	0x15, r24	; 21
     cb4:	08 95       	ret
     cb6:	41 30       	cpi	r20, 0x01	; 1
     cb8:	59 f4       	brne	.+22     	; 0xcd0 <DIO_WRITE_PIN+0xc8>
     cba:	22 b3       	in	r18, 0x12	; 18
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <DIO_WRITE_PIN+0xbe>
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	6a 95       	dec	r22
     cc8:	e2 f7       	brpl	.-8      	; 0xcc2 <DIO_WRITE_PIN+0xba>
     cca:	82 2b       	or	r24, r18
     ccc:	82 bb       	out	0x12, r24	; 18
     cce:	08 95       	ret
     cd0:	22 b3       	in	r18, 0x12	; 18
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_WRITE_PIN+0xd4>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	6a 95       	dec	r22
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_WRITE_PIN+0xd0>
     ce0:	80 95       	com	r24
     ce2:	82 23       	and	r24, r18
     ce4:	82 bb       	out	0x12, r24	; 18
     ce6:	08 95       	ret

00000ce8 <DIO_U8READ_PIN>:
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	08 2f       	mov	r16, r24
     cee:	10 e0       	ldi	r17, 0x00	; 0
     cf0:	f8 01       	movw	r30, r16
     cf2:	e1 54       	subi	r30, 0x41	; 65
     cf4:	f1 09       	sbc	r31, r1
     cf6:	e4 32       	cpi	r30, 0x24	; 36
     cf8:	f1 05       	cpc	r31, r1
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <DIO_U8READ_PIN+0x16>
     cfc:	57 c0       	rjmp	.+174    	; 0xdac <DIO_U8READ_PIN+0xc4>
     cfe:	e4 58       	subi	r30, 0x84	; 132
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__tablejump2__>
     d06:	49 b3       	in	r20, 0x19	; 25
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9c 01       	movw	r18, r24
     d0e:	06 2e       	mov	r0, r22
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <DIO_U8READ_PIN+0x2e>
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <DIO_U8READ_PIN+0x2a>
     d1a:	84 2f       	mov	r24, r20
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	82 23       	and	r24, r18
     d20:	93 23       	and	r25, r19
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_U8READ_PIN+0x40>
     d24:	95 95       	asr	r25
     d26:	87 95       	ror	r24
     d28:	6a 95       	dec	r22
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_U8READ_PIN+0x3c>
     d2c:	98 2f       	mov	r25, r24
     d2e:	3e c0       	rjmp	.+124    	; 0xdac <DIO_U8READ_PIN+0xc4>
     d30:	46 b3       	in	r20, 0x16	; 22
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9c 01       	movw	r18, r24
     d38:	06 2e       	mov	r0, r22
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_U8READ_PIN+0x58>
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	0a 94       	dec	r0
     d42:	e2 f7       	brpl	.-8      	; 0xd3c <DIO_U8READ_PIN+0x54>
     d44:	84 2f       	mov	r24, r20
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	82 23       	and	r24, r18
     d4a:	93 23       	and	r25, r19
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <DIO_U8READ_PIN+0x6a>
     d4e:	95 95       	asr	r25
     d50:	87 95       	ror	r24
     d52:	6a 95       	dec	r22
     d54:	e2 f7       	brpl	.-8      	; 0xd4e <DIO_U8READ_PIN+0x66>
     d56:	98 2f       	mov	r25, r24
     d58:	29 c0       	rjmp	.+82     	; 0xdac <DIO_U8READ_PIN+0xc4>
     d5a:	43 b3       	in	r20, 0x13	; 19
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	9c 01       	movw	r18, r24
     d62:	06 2e       	mov	r0, r22
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_U8READ_PIN+0x82>
     d66:	22 0f       	add	r18, r18
     d68:	33 1f       	adc	r19, r19
     d6a:	0a 94       	dec	r0
     d6c:	e2 f7       	brpl	.-8      	; 0xd66 <DIO_U8READ_PIN+0x7e>
     d6e:	84 2f       	mov	r24, r20
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	82 23       	and	r24, r18
     d74:	93 23       	and	r25, r19
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_U8READ_PIN+0x94>
     d78:	95 95       	asr	r25
     d7a:	87 95       	ror	r24
     d7c:	6a 95       	dec	r22
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_U8READ_PIN+0x90>
     d80:	98 2f       	mov	r25, r24
     d82:	14 c0       	rjmp	.+40     	; 0xdac <DIO_U8READ_PIN+0xc4>
     d84:	40 b3       	in	r20, 0x10	; 16
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9c 01       	movw	r18, r24
     d8c:	06 2e       	mov	r0, r22
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_U8READ_PIN+0xac>
     d90:	22 0f       	add	r18, r18
     d92:	33 1f       	adc	r19, r19
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_U8READ_PIN+0xa8>
     d98:	84 2f       	mov	r24, r20
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	82 23       	and	r24, r18
     d9e:	93 23       	and	r25, r19
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <DIO_U8READ_PIN+0xbe>
     da2:	95 95       	asr	r25
     da4:	87 95       	ror	r24
     da6:	6a 95       	dec	r22
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <DIO_U8READ_PIN+0xba>
     daa:	98 2f       	mov	r25, r24
     dac:	89 2f       	mov	r24, r25
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <DIO_venable_Pullup>:
void DIO_venable_Pullup(char port , char pin , char status)
{
	switch (port)
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	fc 01       	movw	r30, r24
     db8:	e1 54       	subi	r30, 0x41	; 65
     dba:	f1 09       	sbc	r31, r1
     dbc:	e4 32       	cpi	r30, 0x24	; 36
     dbe:	f1 05       	cpc	r31, r1
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <DIO_venable_Pullup+0x10>
     dc2:	67 c0       	rjmp	.+206    	; 0xe92 <DIO_venable_Pullup+0xde>
     dc4:	e0 56       	subi	r30, 0x60	; 96
     dc6:	ff 4f       	sbci	r31, 0xFF	; 255
     dc8:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__tablejump2__>
	{	
	case 'A':
	case 'a':
	if (status == 1)
     dcc:	41 30       	cpi	r20, 0x01	; 1
     dce:	59 f4       	brne	.+22     	; 0xde6 <DIO_venable_Pullup+0x32>
	{
		SET_BIT(PORTA,pin);
     dd0:	2b b3       	in	r18, 0x1b	; 27
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_venable_Pullup+0x28>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	6a 95       	dec	r22
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_venable_Pullup+0x24>
     de0:	82 2b       	or	r24, r18
     de2:	8b bb       	out	0x1b, r24	; 27
     de4:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTA,pin);
     de6:	2b b3       	in	r18, 0x1b	; 27
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <DIO_venable_Pullup+0x3e>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	6a 95       	dec	r22
     df4:	e2 f7       	brpl	.-8      	; 0xdee <DIO_venable_Pullup+0x3a>
     df6:	80 95       	com	r24
     df8:	82 23       	and	r24, r18
     dfa:	8b bb       	out	0x1b, r24	; 27
     dfc:	08 95       	ret
	}
	break;
	case 'B':
	case 'b':
	if (status == 1)
     dfe:	41 30       	cpi	r20, 0x01	; 1
     e00:	59 f4       	brne	.+22     	; 0xe18 <DIO_venable_Pullup+0x64>
	{
		SET_BIT(PORTB,pin);
     e02:	28 b3       	in	r18, 0x18	; 24
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_venable_Pullup+0x5a>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	6a 95       	dec	r22
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_venable_Pullup+0x56>
     e12:	82 2b       	or	r24, r18
     e14:	88 bb       	out	0x18, r24	; 24
     e16:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTB,pin);
     e18:	28 b3       	in	r18, 0x18	; 24
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_venable_Pullup+0x70>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	6a 95       	dec	r22
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_venable_Pullup+0x6c>
     e28:	80 95       	com	r24
     e2a:	82 23       	and	r24, r18
     e2c:	88 bb       	out	0x18, r24	; 24
     e2e:	08 95       	ret
	}
	break;
	case 'C':
	case 'c':
	if (status == 1)
     e30:	41 30       	cpi	r20, 0x01	; 1
     e32:	59 f4       	brne	.+22     	; 0xe4a <DIO_venable_Pullup+0x96>
	{
		SET_BIT(PORTC,pin);
     e34:	25 b3       	in	r18, 0x15	; 21
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_venable_Pullup+0x8c>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	6a 95       	dec	r22
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_venable_Pullup+0x88>
     e44:	82 2b       	or	r24, r18
     e46:	85 bb       	out	0x15, r24	; 21
     e48:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTC,pin);
     e4a:	25 b3       	in	r18, 0x15	; 21
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <DIO_venable_Pullup+0xa2>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	6a 95       	dec	r22
     e58:	e2 f7       	brpl	.-8      	; 0xe52 <DIO_venable_Pullup+0x9e>
     e5a:	80 95       	com	r24
     e5c:	82 23       	and	r24, r18
     e5e:	85 bb       	out	0x15, r24	; 21
     e60:	08 95       	ret
	}
	break;
	case 'D':
	case 'd':
	if (status == 1)
     e62:	41 30       	cpi	r20, 0x01	; 1
     e64:	59 f4       	brne	.+22     	; 0xe7c <DIO_venable_Pullup+0xc8>
	{
		SET_BIT(PORTD,pin);
     e66:	22 b3       	in	r18, 0x12	; 18
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_venable_Pullup+0xbe>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	6a 95       	dec	r22
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_venable_Pullup+0xba>
     e76:	82 2b       	or	r24, r18
     e78:	82 bb       	out	0x12, r24	; 18
     e7a:	08 95       	ret
	}
	else
	{
		CLR_BIT(PORTD,pin);
     e7c:	22 b3       	in	r18, 0x12	; 18
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_venable_Pullup+0xd4>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	6a 95       	dec	r22
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_venable_Pullup+0xd0>
     e8c:	80 95       	com	r24
     e8e:	82 23       	and	r24, r18
     e90:	82 bb       	out	0x12, r24	; 18
     e92:	08 95       	ret

00000e94 <EEPROM_write>:
 */ 

#include "EEPROM.h"
void EEPROM_write(unsigned short address , unsigned char data)
{
	EEAR = address ; 
     e94:	9f bb       	out	0x1f, r25	; 31
     e96:	8e bb       	out	0x1e, r24	; 30
	EEDR = data ; 
     e98:	6d bb       	out	0x1d, r22	; 29
	SET_BIT(EECR,EEMWE);
     e9a:	8c b3       	in	r24, 0x1c	; 28
     e9c:	84 60       	ori	r24, 0x04	; 4
     e9e:	8c bb       	out	0x1c, r24	; 28
	SET_BIT(EECR,EEWE);
     ea0:	8c b3       	in	r24, 0x1c	; 28
     ea2:	82 60       	ori	r24, 0x02	; 2
     ea4:	8c bb       	out	0x1c, r24	; 28
	while(READ_BIT(EECR,EEWE)==1);	
     ea6:	e1 99       	sbic	0x1c, 1	; 28
     ea8:	fe cf       	rjmp	.-4      	; 0xea6 <EEPROM_write+0x12>
}
     eaa:	08 95       	ret

00000eac <EEPROM_read>:
unsigned char EEPROM_read(unsigned short address)
{
	EEAR = address ; 
     eac:	9f bb       	out	0x1f, r25	; 31
     eae:	8e bb       	out	0x1e, r24	; 30
	SET_BIT(EECR,EERE);
     eb0:	8c b3       	in	r24, 0x1c	; 28
     eb2:	81 60       	ori	r24, 0x01	; 1
     eb4:	8c bb       	out	0x1c, r24	; 28
	return EEDR ;
     eb6:	8d b3       	in	r24, 0x1d	; 29
}
     eb8:	08 95       	ret

00000eba <keypad_vInit>:
 *  Author: User
 */ 
#include "Keypad.h"
void keypad_vInit()
{
	DIO_SET_PIN_DIR('D',0,1);
     eba:	41 e0       	ldi	r20, 0x01	; 1
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	84 e4       	ldi	r24, 0x44	; 68
     ec0:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',1,1);
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	84 e4       	ldi	r24, 0x44	; 68
     eca:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',2,1);
     ece:	41 e0       	ldi	r20, 0x01	; 1
     ed0:	62 e0       	ldi	r22, 0x02	; 2
     ed2:	84 e4       	ldi	r24, 0x44	; 68
     ed4:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',3,1);
     ed8:	41 e0       	ldi	r20, 0x01	; 1
     eda:	63 e0       	ldi	r22, 0x03	; 3
     edc:	84 e4       	ldi	r24, 0x44	; 68
     ede:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',4,0);
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	64 e0       	ldi	r22, 0x04	; 4
     ee6:	84 e4       	ldi	r24, 0x44	; 68
     ee8:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',5,0);
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	65 e0       	ldi	r22, 0x05	; 5
     ef0:	84 e4       	ldi	r24, 0x44	; 68
     ef2:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',6,0);
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	66 e0       	ldi	r22, 0x06	; 6
     efa:	84 e4       	ldi	r24, 0x44	; 68
     efc:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('D',7,0);
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	67 e0       	ldi	r22, 0x07	; 7
     f04:	84 e4       	ldi	r24, 0x44	; 68
     f06:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_venable_Pullup('D',4,1);
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	64 e0       	ldi	r22, 0x04	; 4
     f0e:	84 e4       	ldi	r24, 0x44	; 68
     f10:	0e 94 da 06 	call	0xdb4	; 0xdb4 <DIO_venable_Pullup>
	DIO_venable_Pullup('D',5,1);
     f14:	41 e0       	ldi	r20, 0x01	; 1
     f16:	65 e0       	ldi	r22, 0x05	; 5
     f18:	84 e4       	ldi	r24, 0x44	; 68
     f1a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <DIO_venable_Pullup>
	DIO_venable_Pullup('D',6,1);
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	66 e0       	ldi	r22, 0x06	; 6
     f22:	84 e4       	ldi	r24, 0x44	; 68
     f24:	0e 94 da 06 	call	0xdb4	; 0xdb4 <DIO_venable_Pullup>
	DIO_venable_Pullup('D',7,1);	
     f28:	41 e0       	ldi	r20, 0x01	; 1
     f2a:	67 e0       	ldi	r22, 0x07	; 7
     f2c:	84 e4       	ldi	r24, 0x44	; 68
     f2e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <DIO_venable_Pullup>
     f32:	08 95       	ret

00000f34 <keypad_u8check_press>:
}
char keypad_u8check_press()
{
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	60 97       	sbiw	r28, 0x10	; 16
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	e0 e6       	ldi	r30, 0x60	; 96
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	de 01       	movw	r26, r28
     f58:	11 96       	adiw	r26, 0x01	; 1
     f5a:	01 90       	ld	r0, Z+
     f5c:	0d 92       	st	X+, r0
     f5e:	8a 95       	dec	r24
     f60:	e1 f7       	brne	.-8      	; 0xf5a <keypad_u8check_press+0x26>
	char row,coloumn,x;
	char returnval=NOT_PRESSED;
     f62:	ee 24       	eor	r14, r14
     f64:	ea 94       	dec	r14
	for(row=0;row<4;row++)
     f66:	f1 2c       	mov	r15, r1
     f68:	39 c0       	rjmp	.+114    	; 0xfdc <keypad_u8check_press+0xa8>
	{
		DIO_WRITE_PIN('D',0,1);
     f6a:	41 e0       	ldi	r20, 0x01	; 1
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	84 e4       	ldi	r24, 0x44	; 68
     f70:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
		DIO_WRITE_PIN('D',1,1);
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	61 e0       	ldi	r22, 0x01	; 1
     f78:	84 e4       	ldi	r24, 0x44	; 68
     f7a:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
		DIO_WRITE_PIN('D',2,1);
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	62 e0       	ldi	r22, 0x02	; 2
     f82:	84 e4       	ldi	r24, 0x44	; 68
     f84:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
		DIO_WRITE_PIN('D',3,1);
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	63 e0       	ldi	r22, 0x03	; 3
     f8c:	84 e4       	ldi	r24, 0x44	; 68
     f8e:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
		DIO_WRITE_PIN('D',row,0);
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	6f 2d       	mov	r22, r15
     f96:	84 e4       	ldi	r24, 0x44	; 68
     f98:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	for(coloumn=0;coloumn<4;coloumn++)
     f9c:	10 e0       	ldi	r17, 0x00	; 0
     f9e:	19 c0       	rjmp	.+50     	; 0xfd2 <keypad_u8check_press+0x9e>
	{
		x=DIO_U8READ_PIN('D',(coloumn+4));
     fa0:	64 e0       	ldi	r22, 0x04	; 4
     fa2:	61 0f       	add	r22, r17
     fa4:	84 e4       	ldi	r24, 0x44	; 68
     fa6:	0e 94 74 06 	call	0xce8	; 0xce8 <DIO_U8READ_PIN>
     faa:	08 2f       	mov	r16, r24
		if (x==0)
     fac:	81 11       	cpse	r24, r1
     fae:	10 c0       	rjmp	.+32     	; 0xfd0 <keypad_u8check_press+0x9c>
		{
			returnval=arr[row][coloumn];
     fb0:	ef 2d       	mov	r30, r15
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	ee 0f       	add	r30, r30
     fb6:	ff 1f       	adc	r31, r31
     fb8:	ee 0f       	add	r30, r30
     fba:	ff 1f       	adc	r31, r31
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	8c 0f       	add	r24, r28
     fc2:	9d 1f       	adc	r25, r29
     fc4:	e8 0f       	add	r30, r24
     fc6:	f9 1f       	adc	r31, r25
     fc8:	e1 0f       	add	r30, r17
     fca:	f1 1d       	adc	r31, r1
     fcc:	e0 80       	ld	r14, Z
			break;
     fce:	03 c0       	rjmp	.+6      	; 0xfd6 <keypad_u8check_press+0xa2>
		DIO_WRITE_PIN('D',0,1);
		DIO_WRITE_PIN('D',1,1);
		DIO_WRITE_PIN('D',2,1);
		DIO_WRITE_PIN('D',3,1);
		DIO_WRITE_PIN('D',row,0);
	for(coloumn=0;coloumn<4;coloumn++)
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
     fd2:	14 30       	cpi	r17, 0x04	; 4
     fd4:	28 f3       	brcs	.-54     	; 0xfa0 <keypad_u8check_press+0x6c>
			returnval=arr[row][coloumn];
			break;
		}
		
	}
		if (x==0)
     fd6:	00 23       	and	r16, r16
     fd8:	21 f0       	breq	.+8      	; 0xfe2 <keypad_u8check_press+0xae>
char keypad_u8check_press()
{
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char row,coloumn,x;
	char returnval=NOT_PRESSED;
	for(row=0;row<4;row++)
     fda:	f3 94       	inc	r15
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	9f 15       	cp	r25, r15
     fe0:	20 f6       	brcc	.-120    	; 0xf6a <keypad_u8check_press+0x36>
		{
			break;
		}
	}
	return returnval ; 
}
     fe2:	8e 2d       	mov	r24, r14
     fe4:	60 96       	adiw	r28, 0x10	; 16
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	08 95       	ret

00000ffe <enable>:
	LCD_send_cmd(LCD_ENTRYMODE);
	_delay_ms(1);
} */
void static enable(void)
{
	DIO_WRITE_PIN('A',EN,1);
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	62 e0       	ldi	r22, 0x02	; 2
    1002:	81 e4       	ldi	r24, 0x41	; 65
    1004:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
    1008:	8f ec       	ldi	r24, 0xCF	; 207
    100a:	97 e0       	ldi	r25, 0x07	; 7
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <enable+0xe>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <enable+0x14>
    1012:	00 00       	nop
	_delay_ms(1);
	DIO_WRITE_PIN('A',EN,0);
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	62 e0       	ldi	r22, 0x02	; 2
    1018:	81 e4       	ldi	r24, 0x41	; 65
    101a:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
    101e:	8f ec       	ldi	r24, 0xCF	; 207
    1020:	97 e0       	ldi	r25, 0x07	; 7
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <enable+0x24>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <enable+0x2a>
    1028:	00 00       	nop
    102a:	08 95       	ret

0000102c <LCD_send_char>:
	_delay_ms(1);
	
}
void LCD_send_char(char data)
{
    102c:	cf 93       	push	r28
    102e:	c8 2f       	mov	r28, r24
	#if defined eight_bit_mode
	DIO_WRITE_PORT('A',data);
	DIO_WRITE_PIN('A',RS,1);
	enable();
	#elif defined four_bit_mode
	DIO_WRITE_PIN('A',3,READ_BIT(data,4));
    1030:	48 2f       	mov	r20, r24
    1032:	40 71       	andi	r20, 0x10	; 16
    1034:	50 e0       	ldi	r21, 0x00	; 0
    1036:	55 95       	asr	r21
    1038:	47 95       	ror	r20
    103a:	55 95       	asr	r21
    103c:	47 95       	ror	r20
    103e:	55 95       	asr	r21
    1040:	47 95       	ror	r20
    1042:	55 95       	asr	r21
    1044:	47 95       	ror	r20
    1046:	63 e0       	ldi	r22, 0x03	; 3
    1048:	81 e4       	ldi	r24, 0x41	; 65
    104a:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',4,READ_BIT(data,5));
    104e:	4c 2f       	mov	r20, r28
    1050:	40 72       	andi	r20, 0x20	; 32
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	55 95       	asr	r21
    1056:	47 95       	ror	r20
    1058:	55 95       	asr	r21
    105a:	47 95       	ror	r20
    105c:	55 95       	asr	r21
    105e:	47 95       	ror	r20
    1060:	55 95       	asr	r21
    1062:	47 95       	ror	r20
    1064:	55 95       	asr	r21
    1066:	47 95       	ror	r20
    1068:	64 e0       	ldi	r22, 0x04	; 4
    106a:	81 e4       	ldi	r24, 0x41	; 65
    106c:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',5,READ_BIT(data,6));
    1070:	4c 2f       	mov	r20, r28
    1072:	40 74       	andi	r20, 0x40	; 64
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	04 2e       	mov	r0, r20
    1078:	45 2f       	mov	r20, r21
    107a:	00 0c       	add	r0, r0
    107c:	44 1f       	adc	r20, r20
    107e:	55 0b       	sbc	r21, r21
    1080:	00 0c       	add	r0, r0
    1082:	44 1f       	adc	r20, r20
    1084:	55 1f       	adc	r21, r21
    1086:	65 e0       	ldi	r22, 0x05	; 5
    1088:	81 e4       	ldi	r24, 0x41	; 65
    108a:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',6,READ_BIT(data,7));
    108e:	4c 2f       	mov	r20, r28
    1090:	44 1f       	adc	r20, r20
    1092:	44 27       	eor	r20, r20
    1094:	44 1f       	adc	r20, r20
    1096:	66 e0       	ldi	r22, 0x06	; 6
    1098:	81 e4       	ldi	r24, 0x41	; 65
    109a:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',RS,1);
    109e:	41 e0       	ldi	r20, 0x01	; 1
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	81 e4       	ldi	r24, 0x41	; 65
    10a4:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	enable();
    10a8:	0e 94 ff 07 	call	0xffe	; 0xffe <enable>
	DIO_WRITE_PIN('A',3,READ_BIT(data,0));
    10ac:	4c 2f       	mov	r20, r28
    10ae:	41 70       	andi	r20, 0x01	; 1
    10b0:	63 e0       	ldi	r22, 0x03	; 3
    10b2:	81 e4       	ldi	r24, 0x41	; 65
    10b4:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',4,READ_BIT(data,1));
    10b8:	4c 2f       	mov	r20, r28
    10ba:	42 70       	andi	r20, 0x02	; 2
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	55 95       	asr	r21
    10c0:	47 95       	ror	r20
    10c2:	64 e0       	ldi	r22, 0x04	; 4
    10c4:	81 e4       	ldi	r24, 0x41	; 65
    10c6:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',5,READ_BIT(data,2));
    10ca:	4c 2f       	mov	r20, r28
    10cc:	44 70       	andi	r20, 0x04	; 4
    10ce:	50 e0       	ldi	r21, 0x00	; 0
    10d0:	55 95       	asr	r21
    10d2:	47 95       	ror	r20
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	65 e0       	ldi	r22, 0x05	; 5
    10da:	81 e4       	ldi	r24, 0x41	; 65
    10dc:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',6,READ_BIT(data,3));
    10e0:	c8 70       	andi	r28, 0x08	; 8
    10e2:	4c 2f       	mov	r20, r28
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	55 95       	asr	r21
    10e8:	47 95       	ror	r20
    10ea:	55 95       	asr	r21
    10ec:	47 95       	ror	r20
    10ee:	55 95       	asr	r21
    10f0:	47 95       	ror	r20
    10f2:	66 e0       	ldi	r22, 0x06	; 6
    10f4:	81 e4       	ldi	r24, 0x41	; 65
    10f6:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',RS,1);
    10fa:	41 e0       	ldi	r20, 0x01	; 1
    10fc:	61 e0       	ldi	r22, 0x01	; 1
    10fe:	81 e4       	ldi	r24, 0x41	; 65
    1100:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	enable();
    1104:	0e 94 ff 07 	call	0xffe	; 0xffe <enable>
    1108:	8f ec       	ldi	r24, 0xCF	; 207
    110a:	97 e0       	ldi	r25, 0x07	; 7
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	f1 f7       	brne	.-4      	; 0x110c <LCD_send_char+0xe0>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <LCD_send_char+0xe6>
    1112:	00 00       	nop
	_delay_ms(1);
	#endif
}
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <LCD_send_cmd>:
void LCD_send_cmd(char cmd)
{
    1118:	cf 93       	push	r28
    111a:	c8 2f       	mov	r28, r24
	DIO_WRITE_PORT('A',cmd);
	DIO_WRITE_PIN('A',RS,0);
	enable();
	_delay_ms(1);
	#elif defined four_bit_mode
	DIO_WRITE_PIN('A',3,READ_BIT(cmd,4));
    111c:	48 2f       	mov	r20, r24
    111e:	40 71       	andi	r20, 0x10	; 16
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	55 95       	asr	r21
    1124:	47 95       	ror	r20
    1126:	55 95       	asr	r21
    1128:	47 95       	ror	r20
    112a:	55 95       	asr	r21
    112c:	47 95       	ror	r20
    112e:	55 95       	asr	r21
    1130:	47 95       	ror	r20
    1132:	63 e0       	ldi	r22, 0x03	; 3
    1134:	81 e4       	ldi	r24, 0x41	; 65
    1136:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',4,READ_BIT(cmd,5));
    113a:	4c 2f       	mov	r20, r28
    113c:	40 72       	andi	r20, 0x20	; 32
    113e:	50 e0       	ldi	r21, 0x00	; 0
    1140:	55 95       	asr	r21
    1142:	47 95       	ror	r20
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	55 95       	asr	r21
    114a:	47 95       	ror	r20
    114c:	55 95       	asr	r21
    114e:	47 95       	ror	r20
    1150:	55 95       	asr	r21
    1152:	47 95       	ror	r20
    1154:	64 e0       	ldi	r22, 0x04	; 4
    1156:	81 e4       	ldi	r24, 0x41	; 65
    1158:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',5,READ_BIT(cmd,6));
    115c:	4c 2f       	mov	r20, r28
    115e:	40 74       	andi	r20, 0x40	; 64
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	04 2e       	mov	r0, r20
    1164:	45 2f       	mov	r20, r21
    1166:	00 0c       	add	r0, r0
    1168:	44 1f       	adc	r20, r20
    116a:	55 0b       	sbc	r21, r21
    116c:	00 0c       	add	r0, r0
    116e:	44 1f       	adc	r20, r20
    1170:	55 1f       	adc	r21, r21
    1172:	65 e0       	ldi	r22, 0x05	; 5
    1174:	81 e4       	ldi	r24, 0x41	; 65
    1176:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',6,READ_BIT(cmd,7));
    117a:	4c 2f       	mov	r20, r28
    117c:	44 1f       	adc	r20, r20
    117e:	44 27       	eor	r20, r20
    1180:	44 1f       	adc	r20, r20
    1182:	66 e0       	ldi	r22, 0x06	; 6
    1184:	81 e4       	ldi	r24, 0x41	; 65
    1186:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',RS,0);
    118a:	40 e0       	ldi	r20, 0x00	; 0
    118c:	61 e0       	ldi	r22, 0x01	; 1
    118e:	81 e4       	ldi	r24, 0x41	; 65
    1190:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	enable();
    1194:	0e 94 ff 07 	call	0xffe	; 0xffe <enable>
	DIO_WRITE_PIN('A',3,READ_BIT(cmd,0));
    1198:	4c 2f       	mov	r20, r28
    119a:	41 70       	andi	r20, 0x01	; 1
    119c:	63 e0       	ldi	r22, 0x03	; 3
    119e:	81 e4       	ldi	r24, 0x41	; 65
    11a0:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',4,READ_BIT(cmd,1));
    11a4:	4c 2f       	mov	r20, r28
    11a6:	42 70       	andi	r20, 0x02	; 2
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	55 95       	asr	r21
    11ac:	47 95       	ror	r20
    11ae:	64 e0       	ldi	r22, 0x04	; 4
    11b0:	81 e4       	ldi	r24, 0x41	; 65
    11b2:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',5,READ_BIT(cmd,2));
    11b6:	4c 2f       	mov	r20, r28
    11b8:	44 70       	andi	r20, 0x04	; 4
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	55 95       	asr	r21
    11c2:	47 95       	ror	r20
    11c4:	65 e0       	ldi	r22, 0x05	; 5
    11c6:	81 e4       	ldi	r24, 0x41	; 65
    11c8:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',6,READ_BIT(cmd,3));
    11cc:	c8 70       	andi	r28, 0x08	; 8
    11ce:	4c 2f       	mov	r20, r28
    11d0:	50 e0       	ldi	r21, 0x00	; 0
    11d2:	55 95       	asr	r21
    11d4:	47 95       	ror	r20
    11d6:	55 95       	asr	r21
    11d8:	47 95       	ror	r20
    11da:	55 95       	asr	r21
    11dc:	47 95       	ror	r20
    11de:	66 e0       	ldi	r22, 0x06	; 6
    11e0:	81 e4       	ldi	r24, 0x41	; 65
    11e2:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	DIO_WRITE_PIN('A',RS,0);
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	81 e4       	ldi	r24, 0x41	; 65
    11ec:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	enable();
    11f0:	0e 94 ff 07 	call	0xffe	; 0xffe <enable>
    11f4:	8f ec       	ldi	r24, 0xCF	; 207
    11f6:	97 e0       	ldi	r25, 0x07	; 7
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <LCD_send_cmd+0xe0>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <LCD_send_cmd+0xe6>
    11fe:	00 00       	nop
	_delay_ms(1);
	#endif
}
    1200:	cf 91       	pop	r28
    1202:	08 95       	ret

00001204 <LCD_intial>:
    1204:	2f ef       	ldi	r18, 0xFF	; 255
    1206:	81 ee       	ldi	r24, 0xE1	; 225
    1208:	94 e0       	ldi	r25, 0x04	; 4
    120a:	21 50       	subi	r18, 0x01	; 1
    120c:	80 40       	sbci	r24, 0x00	; 0
    120e:	90 40       	sbci	r25, 0x00	; 0
    1210:	e1 f7       	brne	.-8      	; 0x120a <LCD_intial+0x6>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <LCD_intial+0x10>
    1214:	00 00       	nop
	LCD_send_cmd(CLR_SCREEN);
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
	_delay_ms(1);
	#elif defined four_bit_mode
	DIO_SET_PIN_DIR('A',3,1);
    1216:	41 e0       	ldi	r20, 0x01	; 1
    1218:	63 e0       	ldi	r22, 0x03	; 3
    121a:	81 e4       	ldi	r24, 0x41	; 65
    121c:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',4,1);
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	64 e0       	ldi	r22, 0x04	; 4
    1224:	81 e4       	ldi	r24, 0x41	; 65
    1226:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',5,1);
    122a:	41 e0       	ldi	r20, 0x01	; 1
    122c:	65 e0       	ldi	r22, 0x05	; 5
    122e:	81 e4       	ldi	r24, 0x41	; 65
    1230:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',6,1);
    1234:	41 e0       	ldi	r20, 0x01	; 1
    1236:	66 e0       	ldi	r22, 0x06	; 6
    1238:	81 e4       	ldi	r24, 0x41	; 65
    123a:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',RS,1);
    123e:	41 e0       	ldi	r20, 0x01	; 1
    1240:	61 e0       	ldi	r22, 0x01	; 1
    1242:	81 e4       	ldi	r24, 0x41	; 65
    1244:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('A',EN,1);
    1248:	41 e0       	ldi	r20, 0x01	; 1
    124a:	62 e0       	ldi	r22, 0x02	; 2
    124c:	81 e4       	ldi	r24, 0x41	; 65
    124e:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	LCD_send_cmd(RETURN_HOME);
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCD_send_cmd>
    1258:	8f e1       	ldi	r24, 0x1F	; 31
    125a:	9e e4       	ldi	r25, 0x4E	; 78
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <LCD_intial+0x58>
    1260:	00 c0       	rjmp	.+0      	; 0x1262 <LCD_intial+0x5e>
    1262:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(FOUR_BIT);
    1264:	88 e2       	ldi	r24, 0x28	; 40
    1266:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCD_send_cmd>
    126a:	8f ec       	ldi	r24, 0xCF	; 207
    126c:	97 e0       	ldi	r25, 0x07	; 7
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <LCD_intial+0x6a>
    1272:	00 c0       	rjmp	.+0      	; 0x1274 <LCD_intial+0x70>
    1274:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CRS_ON_DSP_ON);
    1276:	8c e0       	ldi	r24, 0x0C	; 12
    1278:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCD_send_cmd>
    127c:	8f ec       	ldi	r24, 0xCF	; 207
    127e:	97 e0       	ldi	r25, 0x07	; 7
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <LCD_intial+0x7c>
    1284:	00 c0       	rjmp	.+0      	; 0x1286 <LCD_intial+0x82>
    1286:	00 00       	nop
	_delay_ms(1);
	LCD_send_cmd(CLR_SCREEN);
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCD_send_cmd>
    128e:	8f e1       	ldi	r24, 0x1F	; 31
    1290:	9e e4       	ldi	r25, 0x4E	; 78
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <LCD_intial+0x8e>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <LCD_intial+0x94>
    1298:	00 00       	nop
	_delay_ms(10);
	LCD_send_cmd(ENTRY_MODE);
    129a:	86 e0       	ldi	r24, 0x06	; 6
    129c:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCD_send_cmd>
    12a0:	8f ec       	ldi	r24, 0xCF	; 207
    12a2:	97 e0       	ldi	r25, 0x07	; 7
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <LCD_intial+0xa0>
    12a8:	00 c0       	rjmp	.+0      	; 0x12aa <LCD_intial+0xa6>
    12aa:	00 00       	nop
    12ac:	08 95       	ret

000012ae <LCD_clear_screen>:
	_delay_ms(1);
	#endif
}
void LCD_clear_screen()
{
	LCD_send_cmd(0x01);
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCD_send_cmd>
    12b4:	08 95       	ret

000012b6 <LCD_move_cursor>:
	char data ;
	if (row>2||row<1||coloumn<1||coloumn>16)
	{
		data = 0x80;
	}
	 if (row == 1 )
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	19 f4       	brne	.+6      	; 0x12c0 <LCD_move_cursor+0xa>
	{
		data = (0x80+coloumn-1);
    12ba:	8f e7       	ldi	r24, 0x7F	; 127
    12bc:	86 0f       	add	r24, r22
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <LCD_move_cursor+0x16>
	}
	else if (row == 2)
    12c0:	82 30       	cpi	r24, 0x02	; 2
    12c2:	19 f4       	brne	.+6      	; 0x12ca <LCD_move_cursor+0x14>
	{
		data = (0xc0+coloumn-1);
    12c4:	8f eb       	ldi	r24, 0xBF	; 191
    12c6:	86 0f       	add	r24, r22
    12c8:	01 c0       	rjmp	.+2      	; 0x12cc <LCD_move_cursor+0x16>
    12ca:	80 e8       	ldi	r24, 0x80	; 128
	}
	LCD_send_cmd(data);
    12cc:	0e 94 8c 08 	call	0x1118	; 0x1118 <LCD_send_cmd>
    12d0:	8f ec       	ldi	r24, 0xCF	; 207
    12d2:	97 e0       	ldi	r25, 0x07	; 7
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <LCD_move_cursor+0x1e>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <LCD_move_cursor+0x24>
    12da:	00 00       	nop
    12dc:	08 95       	ret

000012de <LCD_send_string>:
	_delay_ms(1);
}	
void LCD_send_string(char *data)
{
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24
	while((*data) != '\0')
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <LCD_send_string+0xe>
	{
		LCD_send_char(*data);
    12e6:	0e 94 16 08 	call	0x102c	; 0x102c <LCD_send_char>
		data++;
    12ea:	21 96       	adiw	r28, 0x01	; 1
	LCD_send_cmd(data);
	_delay_ms(1);
}	
void LCD_send_string(char *data)
{
	while((*data) != '\0')
    12ec:	88 81       	ld	r24, Y
    12ee:	81 11       	cpse	r24, r1
    12f0:	fa cf       	rjmp	.-12     	; 0x12e6 <LCD_send_string+0x8>
	{
		LCD_send_char(*data);
		data++;
	}
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <LED_vInit>:
 *  Author: Ahmed Hassan
 */ 
#include "LED.h"
void LED_vInit(char port , char pin )
{
	DIO_SET_PIN_DIR(port , pin,1);
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
    12fe:	08 95       	ret

00001300 <LED_vTurnOn>:
}
void LED_vTurnOn(char port , char pin )
{
	DIO_WRITE_PIN(port,pin,1);
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
    1306:	08 95       	ret

00001308 <LED_vTurnOff>:
}
void LED_vTurnOff(char port , char pin )
{
		DIO_WRITE_PIN(port,pin,0);
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
    130e:	08 95       	ret

00001310 <u8GetKeyPressed>:
	}
	
}

uint8 u8GetKeyPressed(uint8 u8LoginMode)
	{
    1310:	cf 93       	push	r28
    1312:	c8 2f       	mov	r28, r24
	uint8 key_pressed = NOT_PRESSED;
    1314:	8f ef       	ldi	r24, 0xFF	; 255
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    1316:	18 c0       	rjmp	.+48     	; 0x1348 <u8GetKeyPressed+0x38>
	{
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
    1318:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <session_counter>
    131c:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <session_counter+0x1>
    1320:	28 3b       	cpi	r18, 0xB8	; 184
    1322:	3b 40       	sbci	r19, 0x0B	; 11
    1324:	10 f0       	brcs	.+4      	; 0x132a <u8GetKeyPressed+0x1a>
    1326:	c1 30       	cpi	r28, 0x01	; 1
    1328:	49 f0       	breq	.+18     	; 0x133c <u8GetKeyPressed+0x2c>
    132a:	20 91 83 02 	lds	r18, 0x0283	; 0x800283 <session_counter>
    132e:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <session_counter+0x1>
    1332:	20 3d       	cpi	r18, 0xD0	; 208
    1334:	37 40       	sbci	r19, 0x07	; 7
    1336:	30 f0       	brcs	.+12     	; 0x1344 <u8GetKeyPressed+0x34>
    1338:	c2 30       	cpi	r28, 0x02	; 2
    133a:	21 f4       	brne	.+8      	; 0x1344 <u8GetKeyPressed+0x34>
		{
			timeout_flag = TRUE;//set timeout flag to true
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	90 93 82 02 	sts	0x0282, r25	; 0x800282 <__data_end>
			break;//break the loop that wait for input from the user
    1342:	04 c0       	rjmp	.+8      	; 0x134c <u8GetKeyPressed+0x3c>
		}
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
    1344:	0e 94 9a 07 	call	0xf34	; 0xf34 <keypad_u8check_press>
}

uint8 u8GetKeyPressed(uint8 u8LoginMode)
	{
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    1348:	8f 3f       	cpi	r24, 0xFF	; 255
    134a:	31 f3       	breq	.-52     	; 0x1318 <u8GetKeyPressed+0x8>
			break;//break the loop that wait for input from the user
		}
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
	}
	return key_pressed;
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <vMenuOption>:
 */ 
#include "menu.h"
extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated
void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
    1350:	ef 92       	push	r14
    1352:	ff 92       	push	r15
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	d8 2f       	mov	r29, r24
    135e:	f6 2e       	mov	r15, r22
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
	uint8 u8TurnOffCode = 0;//turn off the device or room
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
    1360:	cf ef       	ldi	r28, 0xFF	; 255
extern uint8 timeout_flag;//stores if the session is still valid or outdated
void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
	uint8 u8TurnOffCode = 0;//turn off the device or room
    1362:	e1 2c       	mov	r14, r1
extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated
void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
    1364:	00 e0       	ldi	r16, 0x00	; 0
#include "menu.h"
extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated
void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
    1366:	10 e0       	ldi	r17, 0x00	; 0
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
	uint8 u8TurnOffCode = 0;//turn off the device or room
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	while(( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE))
    1368:	9f c0       	rjmp	.+318    	; 0x14a8 <vMenuOption+0x158>
	{
		LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    136a:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
    136e:	d5 30       	cpi	r29, 0x05	; 5
    1370:	11 f1       	breq	.+68     	; 0x13b6 <vMenuOption+0x66>
    1372:	28 f4       	brcc	.+10     	; 0x137e <vMenuOption+0x2e>
    1374:	d3 30       	cpi	r29, 0x03	; 3
    1376:	49 f0       	breq	.+18     	; 0x138a <vMenuOption+0x3a>
    1378:	d4 30       	cpi	r29, 0x04	; 4
    137a:	91 f0       	breq	.+36     	; 0x13a0 <vMenuOption+0x50>
    137c:	47 c0       	rjmp	.+142    	; 0x140c <vMenuOption+0xbc>
    137e:	d7 30       	cpi	r29, 0x07	; 7
    1380:	81 f1       	breq	.+96     	; 0x13e2 <vMenuOption+0x92>
    1382:	20 f1       	brcs	.+72     	; 0x13cc <vMenuOption+0x7c>
    1384:	d9 30       	cpi	r29, 0x09	; 9
    1386:	c1 f1       	breq	.+112    	; 0x13f8 <vMenuOption+0xa8>
    1388:	41 c0       	rjmp	.+130    	; 0x140c <vMenuOption+0xbc>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_send_string("Room1 S:");					
    138a:	83 e3       	ldi	r24, 0x33	; 51
    138c:	92 e0       	ldi	r25, 0x02	; 2
    138e:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
    1392:	0f 2e       	mov	r0, r31
    1394:	f1 e3       	ldi	r31, 0x31	; 49
    1396:	ef 2e       	mov	r14, r31
    1398:	f0 2d       	mov	r31, r0
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
    139a:	01 e2       	ldi	r16, 0x21	; 33
		LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
    139c:	11 e1       	ldi	r17, 0x11	; 17
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_send_string("Room1 S:");					
			break;
    139e:	36 c0       	rjmp	.+108    	; 0x140c <vMenuOption+0xbc>
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_send_string("Room2 S:");
    13a0:	8c e3       	ldi	r24, 0x3C	; 60
    13a2:	92 e0       	ldi	r25, 0x02	; 2
    13a4:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
			LCD_send_string("Room1 S:");					
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
    13a8:	0f 2e       	mov	r0, r31
    13aa:	f2 e3       	ldi	r31, 0x32	; 50
    13ac:	ef 2e       	mov	r14, r31
    13ae:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_send_string("Room1 S:");					
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
    13b0:	02 e2       	ldi	r16, 0x22	; 34
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_send_string("Room1 S:");					
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
    13b2:	12 e1       	ldi	r17, 0x12	; 18
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_send_string("Room2 S:");
			break;
    13b4:	2b c0       	rjmp	.+86     	; 0x140c <vMenuOption+0xbc>
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_send_string("Room3 S:");
    13b6:	85 e4       	ldi	r24, 0x45	; 69
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
			LCD_send_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
    13be:	0f 2e       	mov	r0, r31
    13c0:	f3 e3       	ldi	r31, 0x33	; 51
    13c2:	ef 2e       	mov	r14, r31
    13c4:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_send_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
    13c6:	03 e2       	ldi	r16, 0x23	; 35
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_send_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
    13c8:	13 e1       	ldi	r17, 0x13	; 19
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_send_string("Room3 S:");
			break;
    13ca:	20 c0       	rjmp	.+64     	; 0x140c <vMenuOption+0xbc>
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_send_string("Room4 S:");
    13cc:	8e e4       	ldi	r24, 0x4E	; 78
    13ce:	92 e0       	ldi	r25, 0x02	; 2
    13d0:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
			LCD_send_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
    13d4:	0f 2e       	mov	r0, r31
    13d6:	f4 e3       	ldi	r31, 0x34	; 52
    13d8:	ef 2e       	mov	r14, r31
    13da:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_send_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
    13dc:	04 e2       	ldi	r16, 0x24	; 36
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_send_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
    13de:	14 e1       	ldi	r17, 0x14	; 20
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_send_string("Room4 S:");
			break;
    13e0:	15 c0       	rjmp	.+42     	; 0x140c <vMenuOption+0xbc>
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_send_string("TV S:");
    13e2:	87 e5       	ldi	r24, 0x57	; 87
    13e4:	92 e0       	ldi	r25, 0x02	; 2
    13e6:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
			LCD_send_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
    13ea:	0f 2e       	mov	r0, r31
    13ec:	f5 e3       	ldi	r31, 0x35	; 53
    13ee:	ef 2e       	mov	r14, r31
    13f0:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_send_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
    13f2:	05 e2       	ldi	r16, 0x25	; 37
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_send_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
    13f4:	15 e1       	ldi	r17, 0x15	; 21
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_send_string("TV S:");
			break;
    13f6:	0a c0       	rjmp	.+20     	; 0x140c <vMenuOption+0xbc>
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
			LCD_send_string("Air Cond. S:");
    13f8:	8d e5       	ldi	r24, 0x5D	; 93
    13fa:	92 e0       	ldi	r25, 0x02	; 2
    13fc:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
			LCD_send_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
    1400:	0f 2e       	mov	r0, r31
    1402:	f6 e3       	ldi	r31, 0x36	; 54
    1404:	ef 2e       	mov	r14, r31
    1406:	f0 2d       	mov	r31, r0
			u8TurnOffCode = TV_TURN_OFF;
			LCD_send_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
    1408:	06 e2       	ldi	r16, 0x26	; 38
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_send_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
    140a:	16 e1       	ldi	r17, 0x16	; 22
			u8TurnOffCode = AIR_COND_TURN_OFF;
			LCD_send_string("Air Cond. S:");
			break;
		}
		/****************************************************************************************************/
		SPI_MasterTransmit_Data(u8StatusCode);//demand the status from the slave
    140c:	81 2f       	mov	r24, r17
    140e:	0e 94 81 0a 	call	0x1502	; 0x1502 <SPI_MasterTransmit_Data>
    1412:	2f ef       	ldi	r18, 0xFF	; 255
    1414:	80 e7       	ldi	r24, 0x70	; 112
    1416:	92 e0       	ldi	r25, 0x02	; 2
    1418:	21 50       	subi	r18, 0x01	; 1
    141a:	80 40       	sbci	r24, 0x00	; 0
    141c:	90 40       	sbci	r25, 0x00	; 0
    141e:	e1 f7       	brne	.-8      	; 0x1418 <vMenuOption+0xc8>
    1420:	00 c0       	rjmp	.+0      	; 0x1422 <vMenuOption+0xd2>
    1422:	00 00       	nop
		_delay_ms(100);//Halt the system for the given time in (ms)
		response =  SPI_MasterTransmit_Data(DEMAND_RESPONSE);//the master micro controller asks for the status
    1424:	8f ef       	ldi	r24, 0xFF	; 255
    1426:	0e 94 81 0a 	call	0x1502	; 0x1502 <SPI_MasterTransmit_Data>
		if(response == ON_STATUS)//if the response from the slave was on status
    142a:	81 30       	cpi	r24, 0x01	; 1
    142c:	29 f4       	brne	.+10     	; 0x1438 <vMenuOption+0xe8>
		{
			LCD_send_string("ON");//print the status on
    142e:	8a e6       	ldi	r24, 0x6A	; 106
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <vMenuOption+0xf0>
		}
		else//if the response from the slave was off status
		{
			LCD_send_string("OFF");//print the status off
    1438:	8d e6       	ldi	r24, 0x6D	; 109
    143a:	92 e0       	ldi	r25, 0x02	; 2
    143c:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
		}

		LCD_move_cursor(2,1);//move the cursor to the start of the second line
    1440:	61 e0       	ldi	r22, 0x01	; 1
    1442:	82 e0       	ldi	r24, 0x02	; 2
    1444:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <LCD_move_cursor>
		LCD_send_string("1-On 2-Off 0-RET");//print the sub menu
    1448:	81 e7       	ldi	r24, 0x71	; 113
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
		/*******************************************************************************/
		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
    1450:	8f 2d       	mov	r24, r15
    1452:	0e 94 88 09 	call	0x1310	; 0x1310 <u8GetKeyPressed>
    1456:	c8 2f       	mov	r28, r24
    1458:	2f ef       	ldi	r18, 0xFF	; 255
    145a:	80 e7       	ldi	r24, 0x70	; 112
    145c:	92 e0       	ldi	r25, 0x02	; 2
    145e:	21 50       	subi	r18, 0x01	; 1
    1460:	80 40       	sbci	r24, 0x00	; 0
    1462:	90 40       	sbci	r25, 0x00	; 0
    1464:	e1 f7       	brne	.-8      	; 0x145e <vMenuOption+0x10e>
    1466:	00 c0       	rjmp	.+0      	; 0x1468 <vMenuOption+0x118>
    1468:	00 00       	nop
		_delay_ms(100);//to avoid the duplication of the pressed key
		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/
		if (key_pressed == '1')
    146a:	c1 33       	cpi	r28, 0x31	; 49
    146c:	21 f4       	brne	.+8      	; 0x1476 <vMenuOption+0x126>
		{
			SPI_MasterTransmit_Data(u8TurnOnCode);//Send turn on signal from master to slave
    146e:	80 2f       	mov	r24, r16
    1470:	0e 94 81 0a 	call	0x1502	; 0x1502 <SPI_MasterTransmit_Data>
    1474:	19 c0       	rjmp	.+50     	; 0x14a8 <vMenuOption+0x158>
		}
		else if (key_pressed == '2')
    1476:	c2 33       	cpi	r28, 0x32	; 50
    1478:	21 f4       	brne	.+8      	; 0x1482 <vMenuOption+0x132>
		{
			SPI_MasterTransmit_Data(u8TurnOffCode);//Send turn off signal from master to slave
    147a:	8e 2d       	mov	r24, r14
    147c:	0e 94 81 0a 	call	0x1502	; 0x1502 <SPI_MasterTransmit_Data>
    1480:	13 c0       	rjmp	.+38     	; 0x14a8 <vMenuOption+0x158>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
    1482:	cf 3f       	cpi	r28, 0xFF	; 255
    1484:	89 f0       	breq	.+34     	; 0x14a8 <vMenuOption+0x158>
    1486:	c0 33       	cpi	r28, 0x30	; 48
    1488:	79 f0       	breq	.+30     	; 0x14a8 <vMenuOption+0x158>
		{
			LCD_clear_screen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    148a:	0e 94 57 09 	call	0x12ae	; 0x12ae <LCD_clear_screen>
			LCD_send_string("Wrong input");//print error message
    148e:	82 ec       	ldi	r24, 0xC2	; 194
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_send_string>
    1496:	2f ef       	ldi	r18, 0xFF	; 255
    1498:	84 e3       	ldi	r24, 0x34	; 52
    149a:	9c e0       	ldi	r25, 0x0C	; 12
    149c:	21 50       	subi	r18, 0x01	; 1
    149e:	80 40       	sbci	r24, 0x00	; 0
    14a0:	90 40       	sbci	r25, 0x00	; 0
    14a2:	e1 f7       	brne	.-8      	; 0x149c <vMenuOption+0x14c>
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <vMenuOption+0x156>
    14a6:	00 00       	nop
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
	uint8 u8TurnOffCode = 0;//turn off the device or room
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	while(( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE))
    14a8:	c0 53       	subi	r28, 0x30	; 48
    14aa:	c3 30       	cpi	r28, 0x03	; 3
    14ac:	28 f0       	brcs	.+10     	; 0x14b8 <vMenuOption+0x168>
    14ae:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
    14b2:	88 23       	and	r24, r24
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <vMenuOption+0x168>
    14b6:	59 cf       	rjmp	.-334    	; 0x136a <vMenuOption+0x1a>
			LCD_send_string("Wrong input");//print error message
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
	}
	
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	08 95       	ret

000014c6 <SPI_vInitMaster>:
 */ 
#include "SPI.h"
void SPI_vInitMaster (void)
{
	/*Set SS / MOSI / SCK  as output pins for master*/
	DIO_SET_PIN_DIR('B',4,1);//SS
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	64 e0       	ldi	r22, 0x04	; 4
    14ca:	82 e4       	ldi	r24, 0x42	; 66
    14cc:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',5,1);//MOSI
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	65 e0       	ldi	r22, 0x05	; 5
    14d4:	82 e4       	ldi	r24, 0x42	; 66
    14d6:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	DIO_SET_PIN_DIR('B',7,1);//SCK
    14da:	41 e0       	ldi	r20, 0x01	; 1
    14dc:	67 e0       	ldi	r22, 0x07	; 7
    14de:	82 e4       	ldi	r24, 0x42	; 66
    14e0:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_SET_PIN_DIR>
	/*set SS to high */
	DIO_WRITE_PIN('B',4,1);
    14e4:	41 e0       	ldi	r20, 0x01	; 1
    14e6:	64 e0       	ldi	r22, 0x04	; 4
    14e8:	82 e4       	ldi	r24, 0x42	; 66
    14ea:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	/*Enable SPI*/
	SET_BIT(SPCR,SPE);
    14ee:	8d b1       	in	r24, 0x0d	; 13
    14f0:	80 64       	ori	r24, 0x40	; 64
    14f2:	8d b9       	out	0x0d, r24	; 13
	/*Enable Master mode*/
	SET_BIT(SPCR,MSTR);
    14f4:	8d b1       	in	r24, 0x0d	; 13
    14f6:	80 61       	ori	r24, 0x10	; 16
    14f8:	8d b9       	out	0x0d, r24	; 13
	//Set clock to fosc/16
	SET_BIT(SPCR,SPR0);
    14fa:	8d b1       	in	r24, 0x0d	; 13
    14fc:	81 60       	ori	r24, 0x01	; 1
    14fe:	8d b9       	out	0x0d, r24	; 13
    1500:	08 95       	ret

00001502 <SPI_MasterTransmit_Data>:
}

unsigned char SPI_MasterTransmit_Data(unsigned char Data)
{
    1502:	cf 93       	push	r28
    1504:	c8 2f       	mov	r28, r24
	
	//Clear SS to send data to slave/
	DIO_WRITE_PIN('B',4,0);
    1506:	40 e0       	ldi	r20, 0x00	; 0
    1508:	64 e0       	ldi	r22, 0x04	; 4
    150a:	82 e4       	ldi	r24, 0x42	; 66
    150c:	0e 94 04 06 	call	0xc08	; 0xc08 <DIO_WRITE_PIN>
	//Put data on SPDR*/
	SPDR=Data;
    1510:	cf b9       	out	0x0f, r28	; 15
	//read SPDR*/
	while (((SPSR&(1<<SPIF))>>SPIF)==0);//wait till the transmitting is done
    1512:	77 9b       	sbis	0x0e, 7	; 14
    1514:	fe cf       	rjmp	.-4      	; 0x1512 <SPI_MasterTransmit_Data+0x10>
	return SPDR ;//data which receive from slave
    1516:	8f b1       	in	r24, 0x0f	; 15
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
	*/
	
}
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <timer_CTC_init_interrupt>:
	OCR1A=value*1000;
	ICR1=19999;
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
    151c:	83 b7       	in	r24, 0x33	; 51
    151e:	88 60       	ori	r24, 0x08	; 8
    1520:	83 bf       	out	0x33, r24	; 51
    1522:	80 e5       	ldi	r24, 0x50	; 80
    1524:	8c bf       	out	0x3c, r24	; 60
    1526:	83 b7       	in	r24, 0x33	; 51
    1528:	81 60       	ori	r24, 0x01	; 1
    152a:	83 bf       	out	0x33, r24	; 51
    152c:	83 b7       	in	r24, 0x33	; 51
    152e:	84 60       	ori	r24, 0x04	; 4
    1530:	83 bf       	out	0x33, r24	; 51
    1532:	78 94       	sei
    1534:	89 b7       	in	r24, 0x39	; 57
    1536:	82 60       	ori	r24, 0x02	; 2
    1538:	89 bf       	out	0x39, r24	; 57
    153a:	08 95       	ret

0000153c <timer0_stop>:
}
void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    153c:	83 b7       	in	r24, 0x33	; 51
    153e:	8e 7f       	andi	r24, 0xFE	; 254
    1540:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
    1542:	83 b7       	in	r24, 0x33	; 51
    1544:	8d 7f       	andi	r24, 0xFD	; 253
    1546:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
    1548:	83 b7       	in	r24, 0x33	; 51
    154a:	8b 7f       	andi	r24, 0xFB	; 251
    154c:	83 bf       	out	0x33, r24	; 51
    154e:	08 95       	ret

00001550 <__tablejump2__>:
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	05 90       	lpm	r0, Z+
    1556:	f4 91       	lpm	r31, Z
    1558:	e0 2d       	mov	r30, r0
    155a:	09 94       	ijmp

0000155c <_exit>:
    155c:	f8 94       	cli

0000155e <__stop_program>:
    155e:	ff cf       	rjmp	.-2      	; 0x155e <__stop_program>
